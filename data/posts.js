export default {
    "seo-basics": {
      "id": "6018dab2e5c67551a8f279f5",
      "uuid": "a7aac7cc-3752-49da-959c-42f2ade4ccb2",
      "title": "SEO Basics and Free Tools",
      "slug": "seo-basics",
      "html": "<p>I knew almost nothing about SEO before starting this website.</p><p>I still know very little about SEO, but I finally have a couple pages that are bringing in traffic from Google. Additionally, I've helped a friend get started with SEO and they're seeing some traffic from Google too.</p><p>This post is about how to go from zero to one with SEO. </p><p>First, I'll discuss SEO at a conceptual level. Then, I'll discuss some technical gotchas that took me a long time to learn. Finally, I share a list of tools and tips that have gotten me started.</p><h2 id=\"seo-101\">SEO 101</h2><p>In this section, I'll cover 3 topics that will give you a conceptual understanding of SEO:</p><ul><li>Ending the User's Search Journey</li><li>Backlinks</li><li>Domain Authority</li></ul><h3 id=\"ending-the-user-s-search-journey\">Ending the User's Search Journey</h3><p>Search Engines are trying to answer a user's query as quickly as possible. They do this by detecting if a search result \"ends the user's journey\". </p><p>This means that your content should be so relevant that the user doesn't hit the back button and go to another result.</p><h3 id=\"backlinks\">Backlinks</h3><p>Backlinks are links from other websites that link to you. These are viewed as endorsements for quality. They are some of the most important signals that search engines use in their rankings. </p><p>Backlinks come in two flavors:</p><ul><li>Regular backlinks, sometimes called \"do follow\" links</li><li>No follow backlinks</li></ul><p>Regular backlinks are strong signals. No follow backlinks are weak signals. </p><p>Websites with user generated content like Reddit and Twitter generally mark all links as \"no follow\" because a user could spam those platforms with links to create more backlinks for their content.</p><p>Because backlinks can be gamed, Search Engines have heuristics to detect manipulation and have gotten quite good at this. If you have millions of regular backlinks but zero \"no follow\" backlinks - that's suspicious because good content will likely get shared on social media from time to time.</p><h3 id=\"domain-equity\">Domain Equity</h3><p>As a website does better and better over time, it will start gaining backlinks across its various pages. All of these backlinks vouch not just for that page, but also the entire domain.</p><p>Basically, this means that if you rank well for one page, you build up equity across all of your pages. All of your future content will start off with a small boost. This is like developing a reputation for good content, which Google will reward in the future.</p><h2 id=\"technical-basics\">Technical Basics</h2><p>I built this website with vanilla Next.js and ran into a few technical gotchas that limited my initial SEO success. Next.js is very fast, which helps SEO, but here's what I learned the hard way:</p><ul><li><strong>Meta tags</strong> - You will rank better if you have your meta tags in good order. Here's a good guide on how to use <a href=\"https://ahrefs.com/blog/seo-meta-tags/\">meta tags for SEO</a>. Meta tags are also where you set the social media preview image, which is important for doing well on social. And they're different between Twitter and OpenGraph! (Here's a good guide on <a href=\"https://css-tricks.com/essential-meta-tags-social-media/\">social media meta tags</a>) </li><li><strong>Sitemap.xml</strong> - Google Search Console allows you to submit a registry of all pages on your website. This is especially useful for new websites that Google may not even know exists. There are lots of libraries that will generate this for you (i.e. <a href=\"https://www.npmjs.com/package/sitemap\">sitemap</a> via npm)</li></ul><h2 id=\"tools-and-tips\">Tools and Tips</h2><p>Use these free tools:</p><ul><li><a href=\"https://search.google.com/search-console/about\">Google Search Console</a> - a must have for new websites. This is where you register your sitemap.xml </li><li><a href=\"https://analytics.google.com/analytics/web/#/\">Google Analytics</a> - or any analytics alternative. You'll want to have some sense for how your pages are doing. <em>Supposedly</em>, Google doesn't use this data to influence rankings, but who knows if some mashed up/data sausage version of this info finds its way indirectly back into the indexing process somehow. Most likely not, but this is a conspiracy story that doesn't hurt you to believe in</li><li><a href=\"https://ahrefs.com/keyword-generator\">Ahrefs Keyword Generator</a> - this tool has been absolutely essential for me. Instead of targeting random terms, plug in a relevant term and see what similar terms might have greater search volume!</li><li><a href=\"https://ahrefs.com/webmaster-tools\">Ahrefs Webmaster Tools</a> - this is like Google Search Console on steroids. Remember, this tool is free. Ahrefs primary tools are paid, but this is an excellent product that is free</li></ul><p>Pro tip: if you use the free Ahrefs Webmaster Tools, and then try to use their free Keyword Generator while you're logged in, you'll get redirected to sign up for a paid tier. To get around this, open the Keyword Generator in another browser, and scroll to the bottom and click on the term \"Keyword Generator\" again.</p><p>I don't have a ton of tips, but here are some of my lessons:</p><ul><li>Use <strong>images/graphics</strong> to supplement your content. All my articles that do well tend to have some graphics</li><li><strong>\"How to\" articles</strong> are a solid category for content</li><li>Use <strong>keyword research</strong> to help you write your title. Content wise, go ahead and write about whatever you want, but at the very end, you can optimize your title for something people are actually searching for. You might even \"pivot\" some of your content after the fact</li><li>Look for ways to create <strong>\"formulaic\" pages</strong>. I haven't used this personally, but I've seen a bunch of people see some success with this. At a high level, the idea is to create pages that are all similar to each other. For example, if one page ranks well for basketball, maybe create another one for football. Doesn't always apply, but I think it applies more often than you might think. Maybe you can repeat content by flavor, city, country, color, etc.</li></ul><h2 id=\"conclusion\">Conclusion</h2><p>There are millions of articles that will be able to take it from here, but I hope this one helps you get started. </p><p>Getting your first page to rank in the top 10 on Google can take a while, and it can be frustrating if you're not getting any results (assuming that you're somewhat trying).</p><p>But if you write articles that can help end someone's search journey, and keep in mind all of the technical gotchas outlined above, then you're actually on your way to ranking.</p><p>Best of luck! </p>",
      "comment_id": "5feff355fa8514a6ce45ebac",
      "feature_image": "https://images.unsplash.com/photo-1516382799247-87df95d790b7?crop=entropy&cs=tinysrgb&fit=max&fm=jpg&ixid=MXwxMTc3M3wwfDF8c2VhcmNofDJ8fG1hZ25pZnlpbmclMjBnbGFzc3xlbnwwfHx8&ixlib=rb-1.2.1&q=80&w=2000",
      "featured": false,
      "visibility": "public",
      "email_recipient_filter": "none",
      "created_at": "2021-01-02T04:15:17.000+00:00",
      "updated_at": "2021-02-11T23:10:50.000+00:00",
      "published_at": "2021-02-11T06:31:00.000+00:00",
      "custom_excerpt": "I struggled for over a year to rank on SEO. Then, I learned some basics and started using some free tools. This is a guide for how you can do it too.",
      "codeinjection_head": null,
      "codeinjection_foot": null,
      "custom_template": null,
      "canonical_url": null,
      "tags": [
        {
          "id": "6018f197e5c67551a8f27c4e",
          "name": "seo",
          "slug": "seo",
          "description": null,
          "feature_image": null,
          "visibility": "public",
          "og_image": null,
          "og_title": null,
          "og_description": null,
          "twitter_image": null,
          "twitter_title": null,
          "twitter_description": null,
          "meta_title": null,
          "meta_description": null,
          "codeinjection_head": null,
          "codeinjection_foot": null,
          "canonical_url": null,
          "accent_color": null,
          "url": "http://localhost:2368/tag/seo/"
        },
        {
          "id": "6018dab2e5c67551a8f279ac",
          "name": "writing",
          "slug": "writing",
          "description": null,
          "feature_image": null,
          "visibility": "public",
          "og_image": null,
          "og_title": null,
          "og_description": null,
          "twitter_image": null,
          "twitter_title": null,
          "twitter_description": null,
          "meta_title": null,
          "meta_description": null,
          "codeinjection_head": null,
          "codeinjection_foot": null,
          "canonical_url": null,
          "accent_color": null,
          "url": "http://localhost:2368/tag/writing/"
        }
      ],
      "primary_tag": {
        "id": "6018f197e5c67551a8f27c4e",
        "name": "seo",
        "slug": "seo",
        "description": null,
        "feature_image": null,
        "visibility": "public",
        "og_image": null,
        "og_title": null,
        "og_description": null,
        "twitter_image": null,
        "twitter_title": null,
        "twitter_description": null,
        "meta_title": null,
        "meta_description": null,
        "codeinjection_head": null,
        "codeinjection_foot": null,
        "canonical_url": null,
        "accent_color": null,
        "url": "http://localhost:2368/tag/seo/"
      },
      "url": "http://localhost:2368/seo-basics/",
      "excerpt": "I struggled for over a year to rank on SEO. Then, I learned some basics and started using some free tools. This is a guide for how you can do it too.",
      "reading_time": 4,
      "access": true,
      "og_image": null,
      "og_title": null,
      "og_description": null,
      "twitter_image": null,
      "twitter_title": null,
      "twitter_description": null,
      "meta_title": null,
      "meta_description": null,
      "email_subject": null,
      "frontmatter": null
    },
    "stablecoins-go-brrrrr": {
      "id": "6018dab2e5c67551a8f279ee",
      "uuid": "4d76d3a3-f377-4ecd-9294-1867b461366c",
      "title": "Stablecoins go Brrrrr",
      "slug": "stablecoins-go-brrrrr",
      "html": "<p><a href=\"https://emptyset.finance/\">Empty Set Dollar</a> and, to a lesser extent, <a href=\"https://basis.cash/\">Basis Cash</a> have been on a tear recently. </p><p>Empty Set Dollar is minting millions of ESD every 8 hours, virtually doubling its supply this past week (Dec 12-19, 2020). Basis Cash is growing by millions of BAC every 24 hours, quintupling its market cap this week.</p><figure class=\"kg-card kg-image-card\"><img src=\"https://pliao39.s3.amazonaws.com/stablecoins/market-cap-go-up.png\" class=\"kg-image\" alt=\"market cap go up\" loading=\"lazy\"></figure><p>Unlike DAI or USDC, Empty Set Dollar (ESD) and Basis Cash (BAC) have no collateral that backs their value. They are entirely algorithmic. This is how they work:</p><ul><li>When the price is greater than $1: brrrr (print money)</li><li>When the price is less than $1: issue bonds/coupons. </li></ul><p>A coupon/bond basically says \"if you destroy your money now, we'll issue you a coupon for more than it's worth when we print more\". In other words, destroy some tokens now and get more tokens in the future - the marshmallow test.</p><p>These are both young projects and it's exciting times.</p><p>But what's somewhat alarming is that these coins have been off their peg quite a bit this week (black line indicates $1):</p><figure class=\"kg-card kg-image-card\"><img src=\"https://pliao39.s3.amazonaws.com/stablecoins/stablecoin-instability.png\" class=\"kg-image\" alt=\"stablecoins not stable\" loading=\"lazy\"></figure><p>Yes, they're both new and over time, I have some level of confidence that they'll return to their $1 peg, but there are still questions that give me pause.</p><h3 id=\"return-of-the-apes\">Return of the Apes</h3><p>Liquidity mining for Empty Set Dollar has attracted the apes. The surge in price of ESD (remember, it's a stablecoin) is almost entirely attributable to the ridiculous yields: </p><figure class=\"kg-card kg-image-card\"><img src=\"https://pliao39.s3.amazonaws.com/stablecoins/degen-farming-esd.png\" class=\"kg-image\" alt=\"degen esd farming\" loading=\"lazy\"></figure><p>DeFi summer like yields are back. This time, brought to you by ESD. </p><p>But the crazy thing is this isn't a liquidity mining incentive. This is just how ESD works. Right now, because ESD is above the $1 peg, the algorithm is choosing to expand supply. It does so by rewarding those ESD holders who have bonded their ESD to the DAO, or have bonded their ESD/USDC LP Tokens  to the protocol.</p><p>This is a strange. Consider the following incentives that exist when ESD is above $1:</p><ul><li>an incentive to buy ESD and bond it (to capture some of the expanding supply)</li><li>(for existing holders) an incentive to bond your ESD to the DAO (to capture some of the expanding supply)</li><li>(for existing holders) an incentive to sell your ESD for another stablecoin (to arbitrage)</li></ul><p>There are incentives to move the price of ESD in both directions.</p><p>ESD can only be stable when the incentive to sell outweighs the incentive to buy. This is a super strange for a stablecoin and I suspect these competing incentives will lead ESD to have extended episodes above $1 in the future. </p><p>With degenerate casino yield farmers constantly looking for insane APYs and coordinating themselves in Discords, you might even get some reflexivity that drives the price upwards from time to time.</p><p>I have a lot of questions about ESD issuance in such a world, but one must hope that cooler heads will prevail and arbitrage ESD back to its peg.</p><h3 id=\"fairness\">Fairness</h3><p>At the core of both of these stablecoins is an issuance model that benefits certain individuals at the expense of others.</p><p>ESD benefits those who have \"bonded\" their ESD - either to the DAO or Liquidity Rewards.</p><p>BAC benefits those who own a complimentary token BAS (all new issuance goes to BAS holders).</p><p>This is unlike Ampleforth which changes everyone's balance daily. This doesn't benefit or harm anyone (i.e. the Cantillon Effect).</p><p>I don't have any hypotheses on how the \"fairness\" of a stablecoin will affect the demand for it. Are all stablecoins viewed as equals? Will people want Ampleforth more because it distributes (and contracts) its supply more fairly?</p><h3 id=\"collapse\">Collapse</h3><p>An algorithmic stablecoin like ESD and BAC are only stable if they can retain their peg. But what happens if the price falls below $1 and not enough people believe that there will be future issuance?</p><p>If that ever happens, then the price of ESD and BAC could never return to their peg, and confidence in these assets would fall. As more people lose confidence, we get reflexivity in the downwards direction as a falling price leads to a greater collapse in confidence, which leads to more dumping. </p><p>This would result in a collapse in the value of ESD or BAC. Will these stablecoins fail spectacularly? Can the pseudonymous teams behind these projects come up with a strategy to mitigate this potential nightmare?</p><p>Early hopes are that ESD V2 could potentially dampen these effects with the <a href=\"https://medium.com/emptysetdollar/introducing-the-esd-treasury-7fe116306c77\">introduction of a treasury</a>. This would transform ESD from a pure algorithmic stablecoin into a hybrid algorithmic, collateral backed stablecoin. ESD could become a multiplier on top of other stablecoins, drastically expanding supply while offering greater price stability through the arbitraging actions of the treasury.</p><h2 id=\"conclusion\">Conclusion</h2><p>I'm watching this space with caution. The demand for stablecoins is massive, and algorithmic stablecoins could potentially scale to supply that demand.</p><p>But they aren't without flaws. They could potentially go to $0. Or they could fulfill their vision and bring a programmable medium of exchange to the masses.</p><p>Only time will tell.</p><p>Some links for further reading:</p><ul><li><a href=\"https://medium.com/basis-cash/overall-guide-for-basis-cash-79b606c5ba8c\">Basis Cash Overview</a></li><li><a href=\"https://docs.emptyset.finance/\">Empty Set Dollar docs</a></li><li><a href=\"https://www.youtube.com/watch?v=e-8yjmsshFg\">Ampleforth Explainer</a> </li><li><a href=\"https://haseebq.com/stablecoins-designing-a-price-stable-cryptocurrency/\">Haseeb's Primer on Stablecoin design</a></li><li><a href=\"https://insights.deribit.com/market-research/stability-elasticity-and-reflexivity-a-deep-dive-into-algorithmic-stablecoins/\">Deribit's Deep Dive into Algorithmic Stablecoins</a></li></ul>",
      "comment_id": "5fd64c654a5ff40cd092573b",
      "feature_image": "https://images.unsplash.com/photo-1526304640581-d334cdbbf45e?crop=entropy&cs=tinysrgb&fit=max&fm=jpg&ixid=MXwxMTc3M3wwfDF8c2VhcmNofDJ8fG1vbmV5JTIwcHJpbnR8ZW58MHx8fA&ixlib=rb-1.2.1&q=80&w=2000",
      "featured": false,
      "visibility": "public",
      "email_recipient_filter": "none",
      "created_at": "2020-12-13T17:16:21.000+00:00",
      "updated_at": "2021-01-04T08:06:28.000+00:00",
      "published_at": "2020-12-20T06:23:51.000+00:00",
      "custom_excerpt": "Algorithmic stablecoins are here and they're expanding their supply. What will become of them?",
      "codeinjection_head": null,
      "codeinjection_foot": null,
      "custom_template": null,
      "canonical_url": null,
      "tags": [
        {
          "id": "6018dab2e5c67551a8f279b9",
          "name": "crypto",
          "slug": "crypto",
          "description": null,
          "feature_image": null,
          "visibility": "public",
          "og_image": null,
          "og_title": null,
          "og_description": null,
          "twitter_image": null,
          "twitter_title": null,
          "twitter_description": null,
          "meta_title": null,
          "meta_description": null,
          "codeinjection_head": null,
          "codeinjection_foot": null,
          "canonical_url": null,
          "accent_color": null,
          "url": "http://localhost:2368/tag/crypto/"
        }
      ],
      "primary_tag": {
        "id": "6018dab2e5c67551a8f279b9",
        "name": "crypto",
        "slug": "crypto",
        "description": null,
        "feature_image": null,
        "visibility": "public",
        "og_image": null,
        "og_title": null,
        "og_description": null,
        "twitter_image": null,
        "twitter_title": null,
        "twitter_description": null,
        "meta_title": null,
        "meta_description": null,
        "codeinjection_head": null,
        "codeinjection_foot": null,
        "canonical_url": null,
        "accent_color": null,
        "url": "http://localhost:2368/tag/crypto/"
      },
      "url": "http://localhost:2368/stablecoins-go-brrrrr/",
      "excerpt": "Algorithmic stablecoins are here and they're expanding their supply. What will become of them?",
      "reading_time": 4,
      "access": true,
      "og_image": null,
      "og_title": null,
      "og_description": null,
      "twitter_image": null,
      "twitter_title": null,
      "twitter_description": null,
      "meta_title": null,
      "meta_description": null,
      "email_subject": null,
      "frontmatter": null
    },
    "soros-on-reflexivity": {
      "id": "6018dab2e5c67551a8f279ef",
      "uuid": "03e29c5e-e7db-47d7-a431-40ad0083c7ac",
      "title": "Soros on Reflexivity",
      "slug": "soros-on-reflexivity",
      "html": "<p>I kept on coming across the term \"reflexivity\" in crypto Twitter and, not knowing what it meant, felt like I was missing an important mental model.</p><p>Turns out the idea of reflexivity was popularized by George Soros and is a seemingly obvious but exceptionally useful mental model. </p><p>Reflexivity is a form of positive feedback cycle that leads to irrational behavior: a speculator believes an asset is valuable, they buy it and drive up the price, and then viewing the rising price as evidence for being correct, the speculator forms a deeper conviction in the value of the asset.</p><p>I decided to watch Soros himself discuss reflexivity, and took some notes:</p><figure class=\"kg-card kg-embed-card\"><iframe width=\"600\" height=\"350\" src=\"https://www.youtube.com/embed/oCaCrWzFPYY?feature=oembed\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe></figure><ul><li>If we treat all drug addicts as criminals, then we generate more criminal behavior</li><li>There are two \"functions\" that give rise to reflexivity - the cognitive function (understanding) and then manipulating function (acting). When these two functions <strong>operate at the same time</strong>, they can interfere with each other, creating reflexivity</li><li>How? If cognition is taking in input from the world, but manipulation can affect that input, then the cognitive function becomes dependent on manipulation. And it's not hard to see how manipulation depends on cognition (you think and then you act).</li><li>The danger? The cognitive function can't produce enough independent knowledge to serve as useful input for the manipulative function's actions. Thus, <strong>the outcome is liable to diverge from the participant's intentions</strong> - there's slippage.</li><li>Slippage between intentions and actions, and furthermore, slippage between actions and outcomes.</li><li>When reflexivity is at play, we are blind to reality, even though we think we are not.</li><li>Reflexivity is about <strong>feedback loops</strong> - think microphones and speakers leading from echo to endless screeching. The serpent eating it's tail. Reflexivity destroys nuance and truth</li><li>Objective vs Subjective reality - objective is the one, true external world, but there can be any number of subjective views. Reflexivity only exists when there is subjective realities at play</li><li><strong>Human uncertainty principle</strong> - when we act on the basis of imperfect understanding and our actions further feed back into our understanding, we're building a house of cards of reality - and our <strong>actions will start to diverge from our expectations</strong>. </li><li>Soros goes on and basically lays waste to classical economic theory because of the human uncertainty principle: \"The subject matter of the natural and social sciences is fundamentally different, therefore they need to develop different methods and they have to be held to different standards. Economic theory should not be expected to produce universally valid laws that can be used reversely to explain and predict historic events.\"</li></ul><p>That was my notes on lecture one, which was abstract. Soros mentioned that there would be more concrete stuff in the next lectures, so I decided to watch that too:</p><figure class=\"kg-card kg-embed-card\"><iframe width=\"600\" height=\"350\" src=\"https://www.youtube.com/embed/RHSEEJDKJho?feature=oembed\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe></figure><p>\"My interpretation of financial markets directly contradicts the efficient market hypothesis\"</p><ul><li>Soros' principles: 1) Market <strong>prices</strong> <strong>always distort the underlying fundamentals</strong>. May be either significant or negligible 2) Financial markets have an active role and affect the \"so-called fundamentals they are supposed to reflect\". Financial <strong>markets can alter the fundamentals</strong></li><li>Lots of ways things get mispriced - but usually because of debt and equity leverage</li><li>Soros' theory of booms and busts - there are two processes at work. First, there is an underlying trend that is rooted in reality, and second, a misconception that is correlated to the trend, but wrong. The trend and the misconception reinforce each other, leading to the bubble. But, the music must stop, and when it does, the trend and misconception reinforce each other, but in reverse. Instead of the trend being correlated, it is <em>now negatively correlated</em>. <strong>People become repulsed by the very truth they previously believed</strong> (even if it was partially correct)</li><li>Key to these bubbles is <strong>the passing of a \"test\"</strong>. This test is when the first wave of skeptics bring down the price, only to be put in their place by reality. This unleashes the running of the bulls (i.e. Tesla in early 2020). If it fails the test, then the bubble stops.</li><li>What this means is that booming speculative premiums, which ultimately result in a collapsing bust, will create an artificially depressed purchasing opportunity once the asset's price has reached its nadir.</li><li>\"The length and strength of each stage is unpredictable\"</li><li>The sequence is predictable, but it can be artificially interrupted by government intervention or some other monkey wrench</li><li>The boom is long and drawn out - starts out gradually until it accelerates and flattens into a twilight plateau.</li><li>The bust is short and steep because of forced liquidations (i.e. traders on margin, foreclosures). This may cause a panic too</li><li>\"<strong>When I see a bubble forming, I rush into buy, adding fuel to the fire</strong> - this is rational\"</li><li>\"We need regulators to counteract the market when a bubble is threatening to grow too big\" - lmao, we have regulators who are pumping the bubble</li><li>In 2008 - a big lesson. \"It cost me dearly. I got the general direction of the markets right, but I didn't allow for the volatility as a consequence I took on positions that were too big to withstand the swings caused by volatility and several times I was forced to reduce my positions at the wrong time in order to limit my risk. <strong>I would have done much better if I had taken smaller positions and stuck with them</strong>.\" Lesson: when you have conviction, do not go \"all in\" such that you'll be pressured to liquidate when you don't want to</li><li>\"I learned the hard way that the <strong>range of uncertainty is also uncertain</strong> and at times it can become <strong>practically infinite</strong>\"</li><li>Soros' belief that the 2008 crisis had its roots in Reagan's misconception that markets can be safely led to their devices because they are self-correcting (\"the magic of the marketplace\"). In the October 1987 portfolio insurance debacle, the Savings and Loan Crisis (1989-1994), the emerging market crisis of 1997/98, and the bursting of the Internet bubble in 2000 the government stepped in (via merging, monetary, or fiscal stimulus) and otherwise protected the economy from collapse. It <strong>strengthened the false belief</strong> that credit and leverage were fine to use - so long as the outcome was good. These crises proved as successful tests of faith. By the time 2008 rolled around, the government had allowed bad behavior to fester</li><li>Basically, we didn't have proper margin requirements and minimum capital requirements in place</li><li>Regulators need to monitor positional imbalances. A given trader can assume that there will always be someone on the opposite side of their position, but regulators cannot accept this from a systemic perspective. Doing so would lead to collapse when a position needs to be exited.</li><li>\"Credit default swaps and knockout options are particularly prone to create <strong>hidden imbalances</strong>\"</li><li>Intelligent regulation may \"push proprietary traders outside of banks and into hedge funds - where they belong\"</li></ul><p>Remember, this was all in 2010 - and it feels just as relevant today as it might in 2008.</p>",
      "comment_id": "5fdeaab924a4fa257e58d6f3",
      "feature_image": "https://images.unsplash.com/photo-1531989417401-0f85f7e673f8?crop=entropy&cs=tinysrgb&fit=max&fm=jpg&ixid=MXwxMTc3M3wwfDF8c2VhcmNofDJ8fG1pcnJvcnxlbnwwfHx8&ixlib=rb-1.2.1&q=80&w=2000",
      "featured": false,
      "visibility": "public",
      "email_recipient_filter": "none",
      "created_at": "2020-12-20T01:36:57.000+00:00",
      "updated_at": "2020-12-20T06:39:18.000+00:00",
      "published_at": "2020-12-20T04:52:46.000+00:00",
      "custom_excerpt": "Some notes on Soros talking about Reflexivity",
      "codeinjection_head": null,
      "codeinjection_foot": null,
      "custom_template": null,
      "canonical_url": null,
      "tags": [
        {
          "id": "6018dab2e5c67551a8f279ba",
          "name": "investing",
          "slug": "investing",
          "description": null,
          "feature_image": null,
          "visibility": "public",
          "og_image": null,
          "og_title": null,
          "og_description": null,
          "twitter_image": null,
          "twitter_title": null,
          "twitter_description": null,
          "meta_title": null,
          "meta_description": null,
          "codeinjection_head": null,
          "codeinjection_foot": null,
          "canonical_url": null,
          "accent_color": null,
          "url": "http://localhost:2368/tag/investing/"
        }
      ],
      "primary_tag": {
        "id": "6018dab2e5c67551a8f279ba",
        "name": "investing",
        "slug": "investing",
        "description": null,
        "feature_image": null,
        "visibility": "public",
        "og_image": null,
        "og_title": null,
        "og_description": null,
        "twitter_image": null,
        "twitter_title": null,
        "twitter_description": null,
        "meta_title": null,
        "meta_description": null,
        "codeinjection_head": null,
        "codeinjection_foot": null,
        "canonical_url": null,
        "accent_color": null,
        "url": "http://localhost:2368/tag/investing/"
      },
      "url": "http://localhost:2368/soros-on-reflexivity/",
      "excerpt": "Some notes on Soros talking about Reflexivity",
      "reading_time": 4,
      "access": true,
      "og_image": null,
      "og_title": null,
      "og_description": null,
      "twitter_image": null,
      "twitter_title": null,
      "twitter_description": null,
      "meta_title": null,
      "meta_description": null,
      "email_subject": null,
      "frontmatter": null
    },
    "software-engineering-interview-prep": {
      "id": "6018dab2e5c67551a8f279ec",
      "uuid": "e6b742a0-8254-47a1-8288-421a11c9eb9d",
      "title": "Software Engineering Interview Prep",
      "slug": "software-engineering-interview-prep",
      "html": "<p>I hate the Algorithm Interview, but it's here to stay.</p><p>This post is a set of useful resources and my notes to help you prepare for algorithm interviews. </p><h2 id=\"useful-resources\">Useful Resources</h2><ul><li>75 useful Leetcode questions to prepare with (here's a <a href=\"https://leetcode.com/list/xi4ci4ig\">Leetcode list</a> for easy cloning, <a href=\"https://www.teamblind.com/post/New-Year-Gift---Curated-List-of-Top-75-LeetCode-Questions-to-Save-Your-Time-OaM1orEU\">Original Blind post</a>)</li><li><a href=\"https://hackernoon.com/14-patterns-to-ace-any-coding-interview-question-c5bb3357f6ed\">14 Patterns to Ace Any Coding Interview Question</a> - extremely useful mental models to master</li><li><a href=\"https://www.youtube.com/channel/UC_mYaQAE6-71rjSN6CeCA-g\">NeetCode YouTube channel</a>. Wow. If you're ever stuck on a problem and want to feel like an absolute dunce, see if your problem is explained on this channel. </li><li>HaseebQ's guide to <a href=\"https://haseebq.com/how-to-break-into-tech-job-hunting-and-interviews/\">Job Hunting and Tech Interviews</a> (read the sections titled \"General Study Strategy\" and \"Programming Interview Study Guide\" - they're gold)</li><li><a href=\"https://www.youtube.com/channel/UCZCFT11CWBi3MHNlGf019nw\">Abdul Bari's YouTube channel</a>. Abdul's explanations of algorithms and data structures are the simplest and clearest I have ever found. No cutesy fluff, no nonsense. Just pure understanding. Better than computerphile</li><li><a href=\"https://www.amazon.com/Algorithm-Design-Manual-Computer-Science/dp/3030542556\">The Algorithm Design Manual</a>. Great book. I use this as a reference, and then if I struggle with understanding anything, I turn to my man Abdul.</li></ul><p>I've been impressed by the amount of excellent resources that have come out in the last three years to help prep. Gayle might have cracked the coding interview, but Abdul Bari and NeetCode, are busting them wide open.</p><h2 id=\"resources-for-other-types-of-interviews\">Resources for Other types of Interviews</h2><p>Not everyone is forcing people to do algorithms. An increasing number of interviews are looking like the one <a href=\"https://startupandrew.com/posts/how-firebase-interviewed-software-engineers/\">Firebase used to use</a> - a legitimate take home problem. Still, lots of them resemble algorithm problems. And often, companies will sprinkle in an algorithm problem or two at the onsite.</p><p>Here are other resources to help you prepare for non-algorithm interviews:</p><ul><li><a href=\"https://github.com/checkcheckzz/system-design-interview\">System Design Interview reference</a> by checkcheckzz </li><li><a href=\"https://www.educative.io/courses/grokking-the-system-design-interview\">Grokking the System Design Interview</a> by Educative (would prefer to link to a free resource, but this one is really strong)</li><li>A useful <a href=\"https://medium.com/swlh/the-software-engineering-interview-cheatsheet-98466b14054\">primer for frontend engineers</a></li><li>A list of companies that <a href=\"https://github.com/poteto/hiring-without-whiteboards\">don't hire with whiteboards</a></li></ul><h2 id=\"leetcode-notes\">Leetcode Notes</h2><p>As I do more Leetcode problems, I'll add some notes here. This section exists to catalogue my struggles as well as record key \"takeaways\" such that I remember the high level strategies that help.</p><p><strong>3Sum</strong> - this problem was painful for me. The optimal solution is so simple once you understand it, but I had to try a couple attempts at this (3 days in a row, after looking at a very well commented solution)</p><p>Takeaways: sorting, two pointers (converging from the left and right onto something in the middle) </p><p><strong>Search in Rotated Sorted Array</strong> - binary search! My solution didn't match the solutions of others, but was fairly elegant.  A friend of mine said that \"you need to be able to write binary search on a whim\" for interviews. I think that's absolutely true.</p><p>Takeaways: practice implementing binary search every now and then. There are a few gotchas that can trip up an algorithm (i.e. lots of off by one errors).</p><p><strong>Combination Sum</strong> - backtracking! I had never implemented a backtracking algorithm before, but after seeing a few examples, I got the hang of it. The Leetcode discussions have a <a href=\"https://leetcode.com/problems/combination-sum/discuss/16502/A-general-approach-to-backtracking-questions-in-Java-(Subsets-Permutations-Combination-Sum-Palindrome-Partitioning)\">very good generalized way</a> of attacking backtracking problems. It makes sense that there is a collection and you \"add\", try an operation, then \"remove\"  (which aids in the name of backtracking).</p><p>Takeaways: when you need to find ALL solutions to a problem, there's a decent chance backtracking can help. As Abdul Bari says, if you need to find an optimal solution, there's a chance dynamic programming is your friend. Backtracking is also useful for \"word search\" type problems.</p><p><strong>Valid Binary Search Tree</strong> - I feel like I've encountered this problem in interviews before. For some reason, I always reach for a recursive solution (which works just fine), but it's useful to remember the in-order, pre-order, and post-order traversals. Here's a <a href=\"https://leetcode.com/problems/validate-binary-search-tree/discuss/32112/Learn-one-iterative-inorder-traversal-apply-it-to-multiple-tree-questions-(Java-Solution)\">great discussion link</a> about in-order traversal and how it can also be used to find the \"k-th smallest\" item in a binary search tree (also a problem I feel like I've encountered).</p><p>Takeaways: Practice in-order traversal</p><p><strong>Number of Islands</strong> - Ah, hello my old friend. I remember when I first attempted this, I spent over 2 hours and I couldn't solve it. Now, I can whip up a pretty tasty solution in 20 minutes. This go around, I forgot a couple of small insights. Reminder: <strong>iterate</strong> through the map (double for loop) in search for an island, do <strong>BFS</strong> once you hit an island <strong>mutating the island with breadcrumbs</strong> as you go, and make sure you count properly.</p><p>Takeaways: remember that BFS is for search, not necessarily for performance.</p><p><strong>Word Search</strong> - I hadn't done this problem before and I found this to be significantly harder than Number of Islands or Combination Sum! This problem is a combination of backtracking plus depth first search. Like Number of Islands, you need to scan through the entire matrix to find a \"starting location\", and then perform a backtracked DFS. Backtracking is still quite unnatural for me, so I'm going to need to do some practice with this technique.</p><p>I'm realizing that the Leetcode \"acceptance\" rate is often a better proxy for difficulty than the difficulty rating itself.</p><p>Takeaways: practice backtracking! Add to path, check the path, remove from path if it didn't work out.</p><p><strong>Binary Tree Maximum Subpath</strong> - I didn't complete this problem, and found the edge cases quite difficult. I looked at the solutions in the discussions and was horrified to find that the \"elegant\" solution involved recursion with mutation. That's the type of \"clever\" performant solution that gets you in trouble in production - maybe if you're writing low level libraries that won't get touched for a while, but this kind of code is not maintenance friendly. Performant yes, but too much of this stuff and you'll kill team performance. In my opinion, this question shows how algorithm interviews are actually <em>harmful</em>.</p><p>Takeaways: avoid companies that ask this question unless they pay extremely well or are working on highly performant systems software and the tradeoff between developer productivity/maintenance and performance is worth it.</p><p><strong>Longest Consecutive Sequence</strong> - I used a variation of UnionFind to solve this, but once I saw <a href=\"https://www.youtube.com/watch?v=P6RZZMu_maU\">the NeetCode solution</a>, I felt like an absolute idiot.</p><p>Takeaways: Always draw out solutions. Sometimes drawing things out will help you see rather obvious invariants that you can utilize in your solution. This is true not just in algorithm interviews, but mathematics, proofs, and other \"insight driven\" disciplines.</p><h2 id=\"abdul-bari-youtube-notes\">Abdul Bari YouTube Notes</h2><p>These are notes from watching Abdul Bari's video lectures.</p><h3 id=\"prim-s-and-kruskal-s-algorithms-minimum-spanning-trees-\">Prim's and Kruskal's Algorithms (Minimum Spanning Trees)</h3><p>While reviewing The Algorithm Design Manual, I realized I had never really attempted a solution at the Traveling Salesman Problem. This took me down a rabbit hole of reading about Minimum Spanning Trees, and later, UnionFind (aka the DisjointSets data structure).</p><p>Prim's and Kruskal's algorithms are ways to generate Minimum Spanning Trees.</p><p>The key thing to remember here are both of these algos are <strong>greedy</strong>. That is, they start with the smallest edge, and go from there.</p><ul><li>Prim: start w/smallest edge, find next smallest connected edge that doesn't form a cycle, and continue</li><li>Kruskal: start w/smallest edge, find next smallest (can be unconnected from the first) that doesn't form a cycle, and continue</li></ul><p>Prim is O(n^2) and Kruskal is O(m logm) where n is the number of vertices in the graph, and m is the number of edges.</p><h3 id=\"unionfind-aka-disjointsets-\">UnionFind (aka DisjointSets)</h3><p>This data structure is extremely useful for Prim's and Kruskal's algorithms becuase both rely on cycle detection. </p><p>The UnionFind data structure is excellent at helping us detect cycles.</p><p>UnionFind can be most efficiently implemented as an array (which in my opinion is difficult to understand). However, at it's core, it is a collection of Sets of vertices: Collection&lt;Set&lt;Vertex&gt;&gt;</p><p>It's hard to explain in words, but here's my best shot:</p><ul><li>Build up UnionFind/DisjointSets by adding edges to the collection of disjoint sets</li><li>When an edge is added, one of 4 possibilities may occur</li><li>1) The edge is disjoint from all existing sets. Add a new disjoint set to the collection</li><li>2) The edge is connected to one of the sets. \"Enlarge\" the set.</li><li>3) The edge joins two disjoint sets together. Perform a union of those two sets (make sure to delete the previously disjoint sets from the collection)</li><li>4) The edge is already \"spanned\" by one of the sets. In this case, we do nothing. However, in the case of Prim's and Kruskal's - this condition triggers our <strong>cycle detected</strong> mechanism.</li></ul><h3 id=\"np-problems\">NP Problems</h3><p>I've never understood all the stuff about P and NP. After watching Abdul, I'm still a little confused, but I think it's a little more clear. These don't really come up in interviews, but it's useful to recognize if an interviewer presents a problem that is NP.</p><p>Polynomial time: n, logn, n<sup>2</sup>, nlogn, n<sup>3</sup></p><p>Not polynomial time: 2<sup>n</sup>, n!</p><p>Even n<sup>10</sup> is much smaller for 2<sup>n</sup> for somewhat sizeable values of n.</p><p>NP stands for non-deterministic polynomial. What does that mean?</p><p>A non-deterministic algorithm is one that contains steps that are \"non-deterministic\". I don't fully understand these \"non-deterministic\" steps, but you can write algorithms using them and treat them essentially as magic. </p><p>If at some point in the future, we figure out how to implement those magical steps, then our non-deterministic algorithms can be solved in polynomial time.</p><p>Thus, a problem is NP if there exists an algorithm which uses a \"non-deterministic\" step to arrive at a polynomial time solution.</p><p>There's more about NP-Complete and NP-Hard, but I'll need to do another watch through to properly understand them.</p>",
      "comment_id": "5fd143134a5ff40cd09254f3",
      "feature_image": "https://images.unsplash.com/photo-1526383426426-c1716158d22a?crop=entropy&cs=tinysrgb&fit=max&fm=jpg&ixid=MXwxMTc3M3wwfDF8c2VhcmNofDM4fHxwcmVwYXJlfGVufDB8fHw&ixlib=rb-1.2.1&q=80&w=2000",
      "featured": false,
      "visibility": "public",
      "email_recipient_filter": "none",
      "created_at": "2020-12-09T21:35:15.000+00:00",
      "updated_at": "2020-12-30T02:57:13.000+00:00",
      "published_at": "2020-12-10T15:20:42.000+00:00",
      "custom_excerpt": "A list of resources to help you prepare for software engineering interviews. There are links to questions and tips",
      "codeinjection_head": null,
      "codeinjection_foot": null,
      "custom_template": null,
      "canonical_url": null,
      "tags": [
        {
          "id": "6018dab2e5c67551a8f279aa",
          "name": "jobs",
          "slug": "jobs",
          "description": null,
          "feature_image": null,
          "visibility": "public",
          "og_image": null,
          "og_title": null,
          "og_description": null,
          "twitter_image": null,
          "twitter_title": null,
          "twitter_description": null,
          "meta_title": null,
          "meta_description": null,
          "codeinjection_head": null,
          "codeinjection_foot": null,
          "canonical_url": null,
          "accent_color": null,
          "url": "http://localhost:2368/tag/jobs/"
        }
      ],
      "primary_tag": {
        "id": "6018dab2e5c67551a8f279aa",
        "name": "jobs",
        "slug": "jobs",
        "description": null,
        "feature_image": null,
        "visibility": "public",
        "og_image": null,
        "og_title": null,
        "og_description": null,
        "twitter_image": null,
        "twitter_title": null,
        "twitter_description": null,
        "meta_title": null,
        "meta_description": null,
        "codeinjection_head": null,
        "codeinjection_foot": null,
        "canonical_url": null,
        "accent_color": null,
        "url": "http://localhost:2368/tag/jobs/"
      },
      "url": "http://localhost:2368/software-engineering-interview-prep/",
      "excerpt": "A list of resources to help you prepare for software engineering interviews. There are links to questions and tips",
      "reading_time": 6,
      "access": true,
      "og_image": null,
      "og_title": null,
      "og_description": null,
      "twitter_image": null,
      "twitter_title": null,
      "twitter_description": null,
      "meta_title": null,
      "meta_description": null,
      "email_subject": null,
      "frontmatter": null
    },
    "how-to-type-faster": {
      "id": "6018dab2e5c67551a8f279eb",
      "uuid": "accf8254-1c81-45cd-9ffc-1d6ef3d9e105",
      "title": "How to Type 100 WPM",
      "slug": "how-to-type-faster",
      "html": "<p>About two years ago, I was typing around 65 words per minute. Today, I routinely average 100+ WPM on TypeRacer and recorded a 111 WPM mark on 10 Fast Fingers.</p><figure class=\"kg-card kg-image-card\"><img src=\"https://pliao39.s3.amazonaws.com/how-to-type-faster/httf-100wpm.png\" class=\"kg-image\" alt=\"Screenshots of my typing results\" loading=\"lazy\"></figure><p>Every email I write is now easier. Every blog post I write is more effortless. As a developer, I don't program much faster, but the cost of implementation feels cheaper. As a result, I write better emails, publish more blog posts, and finish more software projects. Everything just feels slightly easier than before.</p><p>Typing faster has tremendous benefits. </p><p>In this article, I'll show you the steps I took to go from 65 WPM to 100+.</p><h3 id=\"a-note-on-measuring-wpm\">A note on measuring WPM</h3><p>Before we talk about how to reach 100+ WPM, I need to discuss what we mean by \"100 WPM\".</p><p>Some YouTubers claim that you can reach 100+ WPM in a single week. That's extremely misleading.</p><p>The problem with these claims is that they're measuring a personal best, not an average.</p><p>If you look at someone's TypeRacer results, you'll notice a ton of variance.  Here's a chart of all of my races - the goal is to get consistently above the 100 WPM line:</p><figure class=\"kg-card kg-image-card\"><img src=\"https://pliao39.s3.amazonaws.com/how-to-type-faster/httf-above-the-line.png\" class=\"kg-image\" alt=\"Get consistently above 100 WPM\" loading=\"lazy\"></figure><p>The first time I recorded a 100+ WPM race was #604. It wasn't until around race #4,800 that I started seeing highly consistent 100+ WPM races.</p><p>A good way to measure your typing speed is to look at the average of your last X tests. Thankfully, the TypeRacer widget in the top right of your screen tracks the average of your last 10 races.</p><p>When I say \"type 100 WPM\", I mean that we're consistently recording 100+ WPM on the TypeRacer widget.</p><p>Ok, now that we've clarified what 100 WPM means, let's see how it can be done.</p><h2 id=\"fundamentals\">Fundamentals</h2><p>I've seen so many guides out there that tell you that if you want to type faster you need to buy a mechanical keyboard or change to Dvorak, Colemak, or Workman.</p><p>Sadly, I'm here to tell you there is no quick fix - you can't blame your typing speed on QWERTY or your crap keyboard. </p><p>I bought a mechanical keyboard, and it didn't make me type faster (they do feel great though). I've seen other people switch to <a href=\"https://www.theverge.com/2019/2/17/18223384/dvorak-qwerty-keyboard-layout-10-years-speed-ergonomics\">Dvorak</a>/<a href=\"https://www.youtube.com/watch?v=a2Nb9QVujgU\">Workman</a>, only to realize that it doesn't really help you type faster (should pretty much only be used for new typists who haven't built up muscle memory in QWERTY).</p><p>There is pretty much only one path to faster typing: master the fundamentals, then practice a lot, and practice intelligently.</p><p>In this section, we'll talk about fundamentals.</p><p>Before you can type faster, you need to master touch typing - or typing accurately without looking down on your fingers. </p><p>If you're typing under 50WPM, it likely means you're still looking at the keyboard and don't have good finger placement. Don't stress too much on getting textbook finger placement (everyone customizes their typing style anyways), but start by following the textbook approach.</p><figure class=\"kg-card kg-image-card\"><img src=\"https://pliao39.s3.amazonaws.com/how-to-type-faster/httf-placement.png\" class=\"kg-image\" alt=\"How to place your fingers for typing\" loading=\"lazy\"></figure><p>To practice proper placement and eliminate looking at your keyboard, go to a website like <a href=\"https://www.typing.com/\">typing.com</a> and then <a href=\"https://www.keybr.com/\">keybr.com</a>. Typing.com will teach you textbook finger placement. Keybr will help you practice to eliminate errors. </p><p>Depending on where you're starting, you might need to spend a month or so here. Typing.com might be boring, but <strong>don't skip this step</strong>. Keybr is optional, but I recommend spending some time to clean up mistakes. </p><p>There's a good chance that your speed will naturally rise to around 60 WPM when you get the fundamentals of touch typing down. Cutting your need to look at your keyboard will result in big improvements.</p><p>This is the least fun step, but nothing else matters if you skip it. (That said, you can ignore numbers for now)</p><h2 id=\"speed-drills\">Speed Drills</h2><p>Now that you've mastered the basics of typing without looking at the keyboard, it's time to focus on speed.</p><p>While our goal is to record a sustained 10 race average of 100+ on TypeRacer, I think it's important to dedicate some of your practice to 10 Fast Fingers. </p><p>Features that make 10 Fast Fingers great for raising your raw speed</p><ul><li>Incorrect words do not need to be fixed</li><li>No punctuation</li><li>The 200 word bank has a lot of common words which you'll be typing a lot and can optimize</li><li>60 second interval guaranteed </li></ul><p>I know a lot of advice out there talks about minimizing mistakes, which is absolutely crucial for typing faster. However, so is raw speed. </p><p>10 Fast Fingers is the best drill I have found for speed.</p><p>Whenever I practice typing, I start on 10 Fast Fingers for about 5-10 minutes, and then transition to TypeRacer. This vastly improves my practice sessions.</p><h2 id=\"practice-on-typeracer\">Practice on TypeRacer</h2><p>10 Fast Fingers is great, but it's not a true measurement of your speed like TypeRacer. TypeRacer is the standardized test that we're aiming to ace.</p><p>I spend the majority of my typing practice on TypeRacer. On TypeRacer, you just need to practice a lot.</p><p>That might sound dreadful, but it can actually be really fun. Here's some motivational tips:</p><ul><li><strong>Visualize your progress</strong>! Go to the \"My Scores\" widget on TypeRacer. This is a motivation cheat code. Without graphs, I'm 100% sure I would never have done 5,000+ races. There's also a website called <a href=\"http://typeracerdata.com\">TypeRacer Data</a> that pulls in detailed statistics about your races (no visualizations though). And I've even built <a href=\"https://philipliao.com/projects/typeracer\">my own tool</a> to help with visualization (still a prototype)</li></ul><figure class=\"kg-card kg-image-card\"><img src=\"https://pliao39.s3.amazonaws.com/how-to-type-faster/typeracer-my-scores.png\" class=\"kg-image\" alt=\"TypeRacer widget\" loading=\"lazy\"></figure><ul><li>Join <strong>competitive races</strong>. Doing practice races feels \"safer\" but those results aren't tracked so you can't visualize your progress</li><li>You will <strong>not improve monotonically</strong>. That is to say, you will experience lots of spikes and regressions in your typing speed. This is normal and don't beat yourself up about it</li><li>Your <strong>sleep and drowsiness</strong> play a large role in your typing speed</li><li>You will get better at <strong>punctuation</strong> with practice</li><li>You will get really good at hitting <strong>backspace</strong></li><li>You will not get better at <strong>numbers</strong> unless you practice them deliberately. I suggest you learn the placement of a couple numbers (1, 9, and 0 are good ones to start)</li><li><strong>Capitalization</strong> is still a huge pain, I still have trouble with capitalization</li><li>You will notice that <strong>not all passages are created equal</strong>. Some are way harder and will torpedo your typing speed. It's okay, that happens.</li><li>You will read some <strong>extremely interesting quotes.</strong> I've bought books just because of passages I've encountered on TypeRacer. I've stopped and listened to songs on Spotify because of it too.</li></ul><p>TypeRacer's UI basically lets you get into a flow state of races. Do a race, and then another, and another. It's extremely conducive to practice, and I find it quite fun.</p><h2 id=\"how-long-will-this-take\">How Long Will This Take?</h2><p>It's taken me about 5000 races on TypeRacer to reach a fairly consistent 100+ WPM. That was spread out over 2 years, and some months I practiced way more than other months.</p><p>In a <a href=\"https://philipliao.com/typeracer-4000\">previous article</a>, I mentioned that it took me on average 3 hours of practice to improve my WPM by 1. Mantas Donelavicius <a href=\"https://medium.com/@mantasd/touch-typing-how-long-does-it-take-to-reach-100-wpm-129ba855d038\">recorded his progress</a> as well and found that it took him on average 2 hours and 40 minutes to increase his typing speed by 1 WPM.</p><p>If you are starting at a typing speed of under 70 WPM, I think you will see rapid progress by just fixing your finger placement, and getting familiar with touch typing.</p><p>From there, to get to 100 WPM, using a combination of 10 Fast Fingers and TypeRacer, you should expect to raise your speed by 10 WPM for every 20-40 hours of practice. </p><p>But beware! There may be large stretches of time where you feel like you're not improving. For me, the experience of improvement was extremely \"spikey\". Large stretches of no improvement, punctuated by surprisingly sudden increases in WPM.</p><h2 id=\"next-steps\">Next Steps</h2><p>While I haven't reached the next level (which is to get to the 120 WPM mark), I have done some research and I believe the next step is to:</p><ul><li>Master numbers</li><li>Think in terms of words instead of letters (I'm in a hybrid state)</li></ul><p>People who type really fast process information slightly differently. They need to keep a \"buffer\" in their minds of what they're about to type. I find that I am beginning to need this too.</p><p>I don't have any advice on this, but I really enjoyed this YouTube video of someone who types over 160 WPM:</p><figure class=\"kg-card kg-embed-card\"><iframe width=\"600\" height=\"350\" src=\"https://www.youtube.com/embed/oOdfefV2R1I?feature=oembed\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe></figure><h2 id=\"conclusion\">Conclusion</h2><p>Typing faster has been a solid boost to my productivity. It shaves a few minutes off tasks here and there, which might not change how much I can get done in a day, but it reduces the cognitive burden of every task I have.</p><p>There's no shorcut to typing faster (at least to my knowledge). But I hope this guide helps you get a sense of the path that lays before you.</p><p>As a recap:</p><ul><li>Master the fundamentals on <a href=\"https://www.typing.com/\">Typing.com</a></li><li>Focus on Raw Speed on <a href=\"https://10fastfingers.com/\">10 Fast Fingers</a></li><li>And in conjunction, practice on <a href=\"https://play.typeracer.com/\">TypeRacer</a></li></ul><p>Best of luck out there!</p>",
      "comment_id": "5fccf10d4a5ff40cd09252c8",
      "feature_image": "https://images.unsplash.com/photo-1591259932860-d1cbc0b81ec1?crop=entropy&cs=tinysrgb&fit=max&fm=jpg&ixid=MXwxMTc3M3wwfDF8c2VhcmNofDU1fHx8ZW58MHx8fA&ixlib=rb-1.2.1&q=80&w=2000",
      "featured": false,
      "visibility": "public",
      "email_recipient_filter": "none",
      "created_at": "2020-12-06T14:56:13.000+00:00",
      "updated_at": "2020-12-26T18:14:21.000+00:00",
      "published_at": "2020-12-06T17:14:42.000+00:00",
      "custom_excerpt": "This is how I learned to type faster (from 65 WPM to 100 WPM). From touch typing (not looking at the keyboard), to speed drills, and finally getting results on TypeRacer",
      "codeinjection_head": null,
      "codeinjection_foot": null,
      "custom_template": null,
      "canonical_url": null,
      "tags": [
        {
          "id": "6018dab2e5c67551a8f279b7",
          "name": "typing",
          "slug": "typing",
          "description": null,
          "feature_image": null,
          "visibility": "public",
          "og_image": null,
          "og_title": null,
          "og_description": null,
          "twitter_image": null,
          "twitter_title": null,
          "twitter_description": null,
          "meta_title": null,
          "meta_description": null,
          "codeinjection_head": null,
          "codeinjection_foot": null,
          "canonical_url": null,
          "accent_color": null,
          "url": "http://localhost:2368/tag/typing/"
        },
        {
          "id": "6018dab2e5c67551a8f279b4",
          "name": "learning",
          "slug": "learning",
          "description": null,
          "feature_image": null,
          "visibility": "public",
          "og_image": null,
          "og_title": null,
          "og_description": null,
          "twitter_image": null,
          "twitter_title": null,
          "twitter_description": null,
          "meta_title": null,
          "meta_description": null,
          "codeinjection_head": null,
          "codeinjection_foot": null,
          "canonical_url": null,
          "accent_color": null,
          "url": "http://localhost:2368/tag/learning/"
        }
      ],
      "primary_tag": {
        "id": "6018dab2e5c67551a8f279b7",
        "name": "typing",
        "slug": "typing",
        "description": null,
        "feature_image": null,
        "visibility": "public",
        "og_image": null,
        "og_title": null,
        "og_description": null,
        "twitter_image": null,
        "twitter_title": null,
        "twitter_description": null,
        "meta_title": null,
        "meta_description": null,
        "codeinjection_head": null,
        "codeinjection_foot": null,
        "canonical_url": null,
        "accent_color": null,
        "url": "http://localhost:2368/tag/typing/"
      },
      "url": "http://localhost:2368/how-to-type-faster/",
      "excerpt": "This is how I learned to type faster (from 65 WPM to 100 WPM). From touch typing (not looking at the keyboard), to speed drills, and finally getting results on TypeRacer",
      "reading_time": 6,
      "access": true,
      "og_image": null,
      "og_title": null,
      "og_description": null,
      "twitter_image": null,
      "twitter_title": null,
      "twitter_description": null,
      "meta_title": null,
      "meta_description": null,
      "email_subject": null,
      "frontmatter": null
    },
    "uniswap-and-participatory-equity": {
      "id": "6018dab2e5c67551a8f279e8",
      "uuid": "83a9d77c-7a35-4d42-af3f-1890b990e106",
      "title": "Uniswap and Participatory Equity",
      "slug": "uniswap-and-participatory-equity",
      "html": "<p>This week, I returned to <a href=\"https://uniswap.org\">Uniswap</a> for the first time in over a year and was met by a very pleasant surprise - a reward of 400 UNI tokens!</p><figure class=\"kg-card kg-image-card\"><img src=\"https://pliao39.s3.amazonaws.com/uniswap/uniswap-rewards.png\" class=\"kg-image\" alt=\"400 token Uniswap rewards\" loading=\"lazy\"></figure><p>At the time of writing, each UNI token is worth about $3, so this was an \"airdrop\" of about $1,200.</p><p>Every user of Uniswap (someone who attempted to make a transaction on the platform) from before the September 16th <a href=\"https://uniswap.org/blog/uni/\">announcement</a> was eligible for tokens. Other more engaged users were awarded more (for example, those who bought the Uni-socks \"SOCKS\" were given 1,000 UNI).</p><figure class=\"kg-card kg-image-card\"><img src=\"https://pliao39.s3.amazonaws.com/uniswap/uniswap-socks.png\" class=\"kg-image\" alt=\"Rewards for SOCKS holders\" loading=\"lazy\"></figure><p>In addition to the warm fuzzies, this was the first time I had felt - <strong>as a user</strong> - that I was being brought into a community via a financial stake. </p><p>For a while now, companies have been offering equity based compensation to employees, but now, we've arrived at <strong>equity based <em>participation</em></strong>.</p><h2 id=\"equity\">Equity</h2><p>Historically, equity has been something that founders get to determine and investors get to buy into.</p><p>Founders then set aside some small number of shares for future employees, as compensation for their labor and time.</p><p>And together, these founders, investors, and employees get to enjoy the upside of the company. The users are left with a good product, but their upside is capped to the benefits of the product. All of the data that they produce, all of the \"learning\" that they contribute to the company - at best they'll get an Amazon gift card for their focus group participation. Most of the time, they get nothing.</p><p>When I worked at Uber, I received UBER shares for my work. Uber drivers, even though they were awarded <a href=\"https://techcrunch.com/2019/04/11/uber-is-dishing-out-appreciation-awards-up-to-10000-to-let-prolific-drivers-buy-stock/\">a one time bonus</a> at the time of the IPO, did not recieve UBER shares. </p><p>That's unfair.</p><h2 id=\"inequality\">Inequality</h2><p>Our system is fundamentally flawed. </p><p>I'm not going to get into morality, geopolitical conflict, racism, oppression, and other issues that come up when we talk about our financial system. Those are all serious and important. However, for now, let's focus on inequality.</p><p>Profits in our society are an emergent property of monopoly and oligopoly. In a world of perfect competition, there are no profits. In a world of perfect competition, the \"users\" benefit the most because all value is passed on to the consumers in the form of cheaper, better goods.</p><p>Where there are profits, there is wealth accumulation in the hands of a few. This is not necessarily zero sum, and in fact, it's often additive. In an ideal circumstance, if a company builds a tool that provides everyone with a lot of value at a very affordable price, and it captures some profit, then everyone might be better off because of this.</p><p>But the issue is profits tend towards inequality. Those with equity in the system benefit from unbounded upside. On the other hand, users benefit (if they benefit at all) from a product that has a bounded positive impact on their life.</p><p>And what's crazy is that users play a massive role in the success of the company. Users provide feedback, which informs the company on what to do. Users generate data, which the company analyzes and funnels through statistical models to make more decisions.</p><p>Viewed this way, the YC mantra of \"talk to users\" is extractive. Cynically, they might as well say \"perform highly one sided informational extractions with people who you want to transform into addicts\".</p><p>So if users are contributing to the decisions of the company, doesn't it make sense that they should see some of the financial upside? </p><p>There's no reason we can't be creating \"community\" options pools alongside our employee options pools. If only we, as a society, did that - perhaps we'd be able to combat the specter of inequality.</p><p>Well... Uniswap already did that.</p><h2 id=\"uniswap\">Uniswap</h2><p>Crypto has been experimenting with different ways to promote broader community equity and participation for some time now. ICOs were one wave, but it's questionable if that model really works. Airdrops were another attempt, but randomly gifting wallets felt a bit weird as it didn't align incentives.</p><p>Uniswap's token distribution is different.</p><p>For starters, it's the most successful dApp. Unlike the vast majority of crypto products, it's already extremely useful as it allows people to move their crypto from one token to another in a completely decentralized manner. </p><p>Second, the distribution was tied to behavior that aligned with the project's goals. Uniswap didn't reward any random person, it rewarded users.</p><p>Third, the distribution was significant. They didn't just airdrop the equivalent of a Starbucks gift card. This was approximately $1,200 worth of tokens. But most interestingly, these tokens allow users to have a voice and vote on governance decisions. This is what ownership looks like.</p><p>And then, what I love most about it all, is the manner in which Uniswap did it. This is from their official blog post:</p><blockquote>400 UNI are claimable by each address that has ever called the Uniswap v1 or v2 contracts. This includes <strong>~12,000</strong> addresses that have only ever submitted failed transactions — love you guys.</blockquote><p>\"Love you guys\" - has a company ever distributed $1,200 worth of equity to its users and told them that they're loved?</p><p>The Uniswap team really made it feel like this is a project that is meant to be owned by the community. It's like the Green Bay Packers of crypto projects (the Green Bay Packers are an NFL team, but unlike other teams, they're structured as a <a href=\"https://www.packers.com/community/shareholders\">non profit that is publicly owned by fans</a>).</p><figure class=\"kg-card kg-image-card\"><img src=\"https://pliao39.s3.amazonaws.com/uniswap/uniswap-packers.png\" class=\"kg-image\" alt=\"Uniswap and the Green Bay Packers\" loading=\"lazy\"></figure><h2 id=\"conclusion\">Conclusion</h2><p>The pace of innovation in crypto is amazing. </p><p>The open source nature of projects means copying happens instantly. Bad actors get heavily penalized as the community swarms against them. Failed projects teach everyone what not to do. Every success is shared and copied by all.</p><p>And now, users can get small ownership stakes even if they just tried a product.</p><p>It's a hive mind that's creating a truly participatory financial system. </p><p>Incredible to watch.</p>",
      "comment_id": "5fb940b64a5ff40cd0924e9c",
      "feature_image": "https://images.unsplash.com/photo-1539657523674-fbd149b04c13?ixlib=rb-1.2.1&q=80&fm=jpg&crop=entropy&cs=tinysrgb&w=2000&fit=max&ixid=eyJhcHBfaWQiOjExNzczfQ",
      "featured": false,
      "visibility": "public",
      "email_recipient_filter": "none",
      "created_at": "2020-11-21T16:30:46.000+00:00",
      "updated_at": "2020-11-22T02:18:11.000+00:00",
      "published_at": "2020-11-22T02:07:08.000+00:00",
      "custom_excerpt": "Uniswap shows us what it looks like to reward users with equity",
      "codeinjection_head": null,
      "codeinjection_foot": null,
      "custom_template": null,
      "canonical_url": null,
      "tags": [
        {
          "id": "6018dab2e5c67551a8f279b9",
          "name": "crypto",
          "slug": "crypto",
          "description": null,
          "feature_image": null,
          "visibility": "public",
          "og_image": null,
          "og_title": null,
          "og_description": null,
          "twitter_image": null,
          "twitter_title": null,
          "twitter_description": null,
          "meta_title": null,
          "meta_description": null,
          "codeinjection_head": null,
          "codeinjection_foot": null,
          "canonical_url": null,
          "accent_color": null,
          "url": "http://localhost:2368/tag/crypto/"
        }
      ],
      "primary_tag": {
        "id": "6018dab2e5c67551a8f279b9",
        "name": "crypto",
        "slug": "crypto",
        "description": null,
        "feature_image": null,
        "visibility": "public",
        "og_image": null,
        "og_title": null,
        "og_description": null,
        "twitter_image": null,
        "twitter_title": null,
        "twitter_description": null,
        "meta_title": null,
        "meta_description": null,
        "codeinjection_head": null,
        "codeinjection_foot": null,
        "canonical_url": null,
        "accent_color": null,
        "url": "http://localhost:2368/tag/crypto/"
      },
      "url": "http://localhost:2368/uniswap-and-participatory-equity/",
      "excerpt": "Uniswap shows us what it looks like to reward users with equity",
      "reading_time": 4,
      "access": true,
      "og_image": null,
      "og_title": null,
      "og_description": null,
      "twitter_image": null,
      "twitter_title": null,
      "twitter_description": null,
      "meta_title": null,
      "meta_description": null,
      "email_subject": null,
      "frontmatter": null
    },
    "how-to-yield-farm": {
      "id": "6018dab2e5c67551a8f279e7",
      "uuid": "1dd45b2a-9ed4-4f6f-b00c-e0594cf5341a",
      "title": "How to Yield Farm",
      "slug": "how-to-yield-farm",
      "html": "<p>If you’re reading this, you've probably heard of a craze that took the crypto world earlier this year: \"DeFi Casino Summer\".</p><p>At the center of it all was the introduction of \"yield farming\", a practice that was generating 1000+% APYs at its height.</p><p>In this article, I explain what yield farming is, how to do it, and what the risks are. Even if you're not interested in participating in the casino, understanding how to yield farm will teach you the skills you need to participate in DeFi - a permissionless industry that's antifragile and growing at a torrid pace.</p><h2 id=\"motivation\">Motivation</h2><p>What is yield farming and why should you care? </p><p>Yield farming is the concept of <strong>supplying liquidity</strong> to a decentralized exchange, and in turn collecting a small fee.</p><p> Additionally, you get a token for supplying this liquidity and if the project you are supplying liquidity to is in a \"incentivization\" stage, you can \"<strong>stake</strong>\" that token and earn rewards from the project. </p><p>You make money on both <strong>liquidity</strong> fees and <strong>staking</strong> rewards.</p><p>These combined earnings are what we typically refer to as yield farming.</p><p>Yield farming allows you to acquire a potentially speculative asset, without trading for it.</p><h2 id=\"how-to-yield-farm\">How to Yield Farm</h2><p>Here are the hurdles you need clear before you can Yield Farm:</p><ol><li>Acquire <strong>Ether</strong></li><li>Transfer Ether to a <strong>wallet</strong> that you control</li><li><strong>Identify</strong> Yield Farming opportunities</li><li><strong>Acquire the necessary assets</strong> required for you to participate on the yield farm</li><li><strong>Stake</strong> those assets and start collecting yield</li></ol><h3 id=\"1-acquire-ether\">1. Acquire Ether</h3><p>If you've never bought Ether, this is you first hurdle. Thankfully, if you have access to Coinbase, it's pretty easy. That said, it may take DAYS for the ACH transfer from your bank, so you could get stuck at this step if this is the first time you're doing it.</p><p>The second thing to note is that Coinbase charges a hefty 3% fee for buying crypto from their primary website.</p><p>If you find that fee intolerable (you should), then use <a href=\"https://pro.coinbase.com\">Coinbase Pro</a> instead. The Pro version has <a href=\"https://help.coinbase.com/en/pro/trading-and-funding/trading-rules-and-fees/fees\">minimal fees</a> (0.50% or less). The user interface may look intimidating, but if you beeline to trading USD for ETH, it's fairly straightforward. And if you're not too price sensitive, look for a way to place a market order (as opposed to a limit order).</p><p>This may take you 30 minutes - 1 hour if you've never done it before. </p><h3 id=\"2-transfer-ether-to-a-wallet-metamask-\">2. Transfer Ether to a Wallet (Metamask)</h3><p>Once you have bought Ether, you'll need to transfer it to a wallet. I personally use <a href=\"https://metamask.io/index.html\">Metamask</a>, so that's what I will focus on.</p><p>Metamask is a browser extension available for Chrome, Firefox, and Brave. Install this extension and set up your wallet. </p><p>It will ask you to write down a list of recovery words. Find a secure place to save these.</p><p>Once you have your Metamask wallet set up, you will be able to see your wallet address. When you click Metamask, you'll see <code>Account 1</code> and underneath something like <code>0x....</code>. When you hover over that, it will say \"Copy to Clipboard\".</p><p>Now, go back to Coinbase Pro and withdraw your Ether. Set the destination address to be your Metamask address that you copied above.</p><h3 id=\"3-identify-yield-farming-opportunities\">3. Identify Yield Farming Opportunities</h3><p>For many of you reading this, steps 1 and 2 are things you might have done a long time ago. Thus, this is where it gets interesting.</p><p>Currently, the best place to go to find yield farming opportunities is <a href=\"https://www.coingecko.com\">Coin Gecko</a>. Coin Gecko works hard to curate and list all sorts of investment vehicles in the crypto space. They are reputable and considered good faith actors. </p><p>As it pertains to yield farming, we want to focus on their \"<a href=\"https://www.coingecko.com/en/yield-farming\">Farms</a>\" tab. You'll see something like this:</p><figure class=\"kg-card kg-image-card\"><img src=\"https://pliao39.s3.amazonaws.com/how-to-yield-farm/htyf_coin-gecko.png\" class=\"kg-image\" alt=\"Coin Gecko\" loading=\"lazy\"></figure><p>Right now, lots of people are providing liquidity to Sushi and receiving yield on the SUSHI token. While I don't personally farm much SUSHI, it is the most popular asset at the moment, so we'll focus on that. </p><p>There are many ways to get SUSHI right now. They all involve providing liquidity to the following pairs on SushiSwap. Here are some examples:</p><ul><li>ETH-USDT</li><li>ETH-USDC</li><li>ETH-DAI</li><li>ETH-SUSHI</li></ul><p>If we want to participate in yield farming, we'll need to acquire a pair of those assets, supply them to a SushiSwap liquidity pool, recieve an \"LP token\" and then stake that \"LP token\" to start getting a constant trickle of SUSHI token.</p><p>Let's focus on the ETH-SUSHI pair because that's giving a good healthy yield right now of over 100% APY.</p><p>Alright, so how do we do this?</p><h3 id=\"4-acquire-the-necessary-assets\">4. Acquire the Necessary Assets</h3><p>Our ultimate goal is to <strong>acquire liquidity provider tokens</strong>, or \"LP tokens\". For many yield farming opportunities, we need Uniswap LP tokens. In the case of SUSHI, we will need Sushi LP tokens or SLP. It is really important that you're clear on which platform the LP tokens need to be issued by. On Coin Gecko, they help by providing basic instructions. </p><p>I've annotated a screenshot below:</p><figure class=\"kg-card kg-image-card\"><img src=\"https://pliao39.s3.amazonaws.com/how-to-yield-farm/htyf_understand-which-lp-platform.png\" class=\"kg-image\" alt=\"Understanding which platform to provide liquidity\" loading=\"lazy\"></figure><p>But many times, you will need to do your own research and understand which assets you need to acquire. In the image above, I indicated \"???\" for those yield farming opportunities I could not immediately understand.</p><p>In the case of WETH-SUSHI, what we're after are the following assets:</p><ul><li>ETH-SUSHI LP Token on SushiSwap. Which we can \"create\" if we first acquire</li><li>ETH (ignore the W in WETH, regular ETH will work)</li><li>SUSHI token</li></ul><p>We already have ETH, as we transferred this to our Metamask wallet. Thus, that just leaves us with acquiring SUSHI token. How do we do that?</p><p>We go to an exchange. My preference is a decentralized exchange.</p><p>Uniswap is the biggest one. SushiSwap is a clone (and smaller - and has a questionable history). Thus, using either <a href=\"https://app.uniswap.org/\">Uniswap</a> or <a href=\"https://exchange.sushiswapclassic.org/#/swap\">SushiSwap</a>, we can trade some ETH for SUSHI token. </p><p><em>There are other decentralized exchanges out there, but these two are by far the easiest to get started with. Plus, you'll need to interact with them anyways to get your LP token.</em></p><p>This is what their interfaces for swapping look like. SushiSwap on the left, Uniswap on the right:</p><figure class=\"kg-card kg-image-card\"><img src=\"https://pliao39.s3.amazonaws.com/how-to-yield-farm/htyf_sushi-v-uni.png\" class=\"kg-image\" alt=\"SushiSwap vs Uniswap\" loading=\"lazy\"></figure><p>As you can see, it looks very simple. You select the token you want to trade, and the token you want to receive. Then you press swap, accept some Metamask confirmations, wait for the transactions to process, and then you're done!</p><p><strong>Make sure to leave some ETH left over</strong>! You don't want to trade all of it for SUSHI, because you will need <strong>an even amount of both</strong> assets to provide liquidity.</p><p>If you can't find the SUSHI token, you might need to change the list that SushiSwap and Uniswap are using to find the tokens. When you click the dropdown menu to change your selection, you'll need to try a different list. Here's what I mean:</p><figure class=\"kg-card kg-image-card\"><img src=\"https://pliao39.s3.amazonaws.com/how-to-yield-farm/htyf_find-token.png\" class=\"kg-image\" alt=\"Changing lists\" loading=\"lazy\"></figure><p>You might need to try a couple lists to find the token you're looking for. There are other ways to get the token to show up (i.e. pasting the address in the text field), but this is the easiest.</p><p>Now that we have SUSHI and ETH, let's go get our ETH-SUSHI LP Token on SushiSwap. This is important that we do this next step on SushiSwap! To do this, go back to the <a href=\"https://exchange.sushiswapclassic.org/#/pool\">SushiSwap app</a>, but make sure to click on the Pool tab:</p><figure class=\"kg-card kg-image-card\"><img src=\"https://pliao39.s3.amazonaws.com/how-to-yield-farm/htyf_providing-liquidity.png\" class=\"kg-image\" alt=\"Providing Liquidity on SushiSwap\" loading=\"lazy\"></figure><p>When we provide liquidity, we must do so in a 1:1 proportion. That is, if we want to supply $100 of ETH, we must also supply $100 of SUSHI. This is why it's so important to leave some ETH in your wallet.</p><p>From this point, we just approve SUSHI, wait for that transaction to go through, and then click Supply - and wait for the second transaction to go through.</p><p>For our troubles, we'll now obtained a ETH-SUSHI LP Token! </p><h3 id=\"5-staking-and-collecting-yield\">5. Staking and Collecting Yield</h3><p>We can take our ETH-SUSHI LP Token and go to SushiSwap's farm (you can find this from either Coin Gecko, or navigating from SushiSwap's homepage). In our case, the farm is located on <a href=\"https://sushiswapclassic.org/farms/SUSHI-ETH%20SLP\">this page</a>.</p><p>You'll see something like this, where you can start staking:</p><figure class=\"kg-card kg-image-card\"><img src=\"https://pliao39.s3.amazonaws.com/how-to-yield-farm/htyf_sushi-stake.png\" class=\"kg-image\" alt=\"Start staking Sushi\" loading=\"lazy\"></figure><p><em>Your screen might look slightly different from mine because I've already begun staking, but the buttons will be mostly in the same location.</em></p><p>Again, press some buttons, specify how much you want to stake, do some Metamask confirmations, and when the transactions go through, you'll be staking!</p><p>The value of the SUSHI that you've farmed will show up on the left. Not to mention, you're earning liquidity provider fees on the funds you placed in SushiSwap too.</p><p>Congratulations, you're yield farming!</p><h2 id=\"understanding-yield-farming\">Understanding Yield Farming</h2><p>Now that you know how to yield farm (or have bookmarked this page for later), let's talk about what the yield farming opportunity really is.</p><p>At its core, we know that when we're yield farming, we're getting rewarded for providing liquidity, as well as for staking our LP tokens (basically, proof of liquidity).</p><p>Let's understand why we should be getting a liquidity fee and the risk we have when we do so (impermanent loss). And then let's talk about why anyone would issue tokens for us to \"stake\" our LP tokens.</p><h3 id=\"liquidity-fees\">Liquidity Fees</h3><p>Fundamentally, it makes sense why we should earn liquidity fees. We're providing our assets such that those who are looking to exchange one token for another have a market for this. They don't have to wait to find a buyer, and it's pretty seamless to go from the thought \"I want token Y\" to the action \"I will exchange X for Y\".</p><p>That requires liquidity. We're providing it. Uniswap is collecting fees on our behalf. When we redeem our LP tokens back for our underlying assets, we'll get a little bit more than we put in.</p><h3 id=\"impermanent-loss\">Impermanent Loss</h3><p>However, this is not risk free! Due to some rather interesting constraints and details of how Uniswap, SushiSwap, Balancer, and all such \"x * y = k\" exchanges work, we are subject to an opportunity cost known as impermanent loss.</p><p>I won't explain why it happens in this article (maybe later), but the effect is that in certain conditions, a liquidity provider may actually be worse off by providing liquidity to the pool, compared to doing nothing at all. What is that condition? </p><p>When the relative price of the two assets they're providing liquidity changes. So in our case, if either SUSHI becomes far more valuable than ETH or ETH becomes far more valuable than SUSHI, we're subject to impermanent loss. It's all about the relative price.</p><p>There are lots of calculators that will do this for you, but nothing I've found that monitors the relative prices and alerts you if you're experiencing significant impermanent loss. But it's very important to keep in mind while you're yield farming, otherwise, you put in all this effort and are now worse off than if you did nothing!</p><h3 id=\"why-do-i-want-sushi\">Why do I want SUSHI?</h3><p>One question you might be asking is, why do I even want SUSHI token anyways? Why am I staking my LP tokens to acquire it?</p><p>Well, the SUSHI token is a governance token - and when it comes to decentralized exchanges, it's relatively easy to see why that might be valuable. In the future, SUSHI might change the rules such that SUSHI token holders see a small share of the liquidity fee. In such a future, that would be like a dividend on a stock. Or, you might see SUSHI holders vote on other changes to the platform.</p><p>Governance tokens are a lot like equity in a company. A share of stock in a company allows you to vote on who the CEO should be, as well as a variety of other decisions. You also get dividends, when the company decides to issue them.</p><p>In crypto, there are lots of governance tokens for this reason. It's a model that is somewhat intuitive to those who come from a background in traditional finance. Of course, there are many other things we can do with tokens, but governance is the foundation.</p><p>Do I personally believe in the SUSHI token? I have no idea, but I think it's a good idea to have a little of both the SUSHI and UNI tokens. </p><h3 id=\"understanding-risk\">Understanding Risk</h3><p>If we take a moment and step back, we need to  properly evaluate risk. </p><p>We know there's the risk of impermanent loss. </p><p>Let's imagine a scenario where one of the underlying assets starts falling. Those who provided liquidity will start feeling the effects of impermanent loss. LPs will be pressured to exit the pool to get their underlying pair. But because one of the assets are falling in value, LPs may go back to the pool and trade the devalued asset for the more stable asset.</p><p>This could cause a massive collapse in the value of the asset experiencing a falling valuation.</p><p>Another risk is that the reward token's value plummets. In this case, the reward subsidy is decreasing in value. Now you're providing liquidity to a pool that you wouldn't have otherwise, risking impermanent loss for collecting minimal fees.</p><p>Reward tokens can plummet if they give out <strong>too many rewards too quickly</strong> (causing inflation and encouraging holders to sell), or if the <strong>project attracts short term farmers</strong> who don't want to hold the reward tokens (and dump the tokens as soon as they recieve it). In both of these cases, farming would put downward pressure on the reward token - it's hard to justify holding a token that's collapsing in value. (Although, for good projects with a clear max supply, this presents a solid buying opportunity).</p><h2 id=\"conclusion\">Conclusion</h2><p>I hope this was a helpful introduction on how to yield farm. We spent a lot of time talking about how to yield farm on SUSHI, but there are other opportunities out there.</p><p>Take the time to do your own research, think through which tokens you want earn via staking, and figure out if there's a path to yield farming that exposes you to risks that you are comfortable taking.</p><p>If you do all of these steps, you might realize that DeFi has come a long way. You can now:</p><ul><li>Earn crypto by providing liquidity on exchanges</li><li>Earn crypto by lending it out on something like Compound</li><li>Use your receipts of liquidity (LP tokens) and lending (i.e. cTokens) to generate more yield via staking </li><li>Easily transition one asset to another</li><li>Park your money in stablecoins, if you need a breather</li></ul><p>And much much more.</p><p>I personally had taken a break from crypto for many months and when I returned to the space, I was amazed by the capabilities of these platforms. The pace of innovation is crazy (everything is open source, so everything gets copied and tweaked).</p><p>This is just the beginning.</p>",
      "comment_id": "5fb7ee474a5ff40cd0924b93",
      "feature_image": "https://images.unsplash.com/9/fields.jpg?ixlib=rb-1.2.1&q=80&fm=jpg&crop=entropy&cs=tinysrgb&w=2000&fit=max&ixid=eyJhcHBfaWQiOjExNzczfQ",
      "featured": false,
      "visibility": "public",
      "email_recipient_filter": "none",
      "created_at": "2020-11-20T16:26:47.000+00:00",
      "updated_at": "2020-12-16T16:57:39.000+00:00",
      "published_at": "2020-11-20T20:38:29.000+00:00",
      "custom_excerpt": "Yield farming might not be as profitable as it was earlier this year, but if you're curious about this opportunity in DeFi, read this guide.",
      "codeinjection_head": null,
      "codeinjection_foot": null,
      "custom_template": null,
      "canonical_url": null,
      "tags": [
        {
          "id": "6018dab2e5c67551a8f279b9",
          "name": "crypto",
          "slug": "crypto",
          "description": null,
          "feature_image": null,
          "visibility": "public",
          "og_image": null,
          "og_title": null,
          "og_description": null,
          "twitter_image": null,
          "twitter_title": null,
          "twitter_description": null,
          "meta_title": null,
          "meta_description": null,
          "codeinjection_head": null,
          "codeinjection_foot": null,
          "canonical_url": null,
          "accent_color": null,
          "url": "http://localhost:2368/tag/crypto/"
        }
      ],
      "primary_tag": {
        "id": "6018dab2e5c67551a8f279b9",
        "name": "crypto",
        "slug": "crypto",
        "description": null,
        "feature_image": null,
        "visibility": "public",
        "og_image": null,
        "og_title": null,
        "og_description": null,
        "twitter_image": null,
        "twitter_title": null,
        "twitter_description": null,
        "meta_title": null,
        "meta_description": null,
        "codeinjection_head": null,
        "codeinjection_foot": null,
        "canonical_url": null,
        "accent_color": null,
        "url": "http://localhost:2368/tag/crypto/"
      },
      "url": "http://localhost:2368/how-to-yield-farm/",
      "excerpt": "Yield farming might not be as profitable as it was earlier this year, but if you're curious about this opportunity in DeFi, read this guide.",
      "reading_time": 10,
      "access": true,
      "og_image": null,
      "og_title": null,
      "og_description": null,
      "twitter_image": null,
      "twitter_title": null,
      "twitter_description": null,
      "meta_title": null,
      "meta_description": null,
      "email_subject": null,
      "frontmatter": null
    },
    "getting-into-flow": {
      "id": "6018dab2e5c67551a8f279de",
      "uuid": "df4a9a28-e9c0-480d-8579-5e49da732b04",
      "title": "Getting into Flow",
      "slug": "getting-into-flow",
      "html": "<p>Yesterday and today could not have been more different. </p><p>Yesterday, I wasted the day away with distractions and inefficient use of time. Today, I finished everything I wanted to do and more.</p><p>The difference, I believe, was clear within the first 2 hours of both days. </p><p>The first hour of both days were identical, as I've started a 1 hour meditation practice after waking up. </p><p>In the next hour, the tone was set.</p><p>Yesterday, I started by checking email - the gateway drug to endless distraction. And then I followed that with breakfast.</p><p>Today, I started work almost immediately after meditation. I glanced at my task tracker for just a moment to regain clarity on what I was going to do, and started breaking down the task in my head. After responding to a couple quick messages, I was able to chip away. I delayed breakfast for two hours.</p><h2 id=\"getting-into-flow\">Getting into Flow</h2><p>I was speaking with a friend today and he mentioned a term I had almost forgotten about - flow. Years ago, the idea blew my mind. If I could get into a flow state more often, that would change everything!</p><p>And like all new ideas, it vanished with the news cycle. 3 months later, the amount of time I spent in flow state didn't change.</p><p>But just the sheer mention of the term by my friend today brought that idea back into the spotlight. It was time to figure out how to get myself into flow.</p><h2 id=\"metawork\">Metawork</h2><p>Previously, I've written about <a href=\"https://pliao39.com/metawork\">metawork</a>. It's the idea that if everything is created twice (once in your mind and once in reality). </p><p>In my life, I have found this to be true: if I don't do the metawork before the work, I often find myself bumbling around. It's a miracle that progress eventually gets made, but the quality of the work is low, and the efficiency is poor. </p><p>One connection I had previously missed was the connection between metawork, clarity, and flow states.</p><p>I'm now realizing that metawork is a necessary condition to getting into flow because it provides your clarity.</p><h2 id=\"clarity\">Clarity</h2><p>There are a lot of triggers that can put you into a flow state, but I believe the most important one is focus. In order to focus, however, you must know what you are focusing on. In other words, the object of your focus must be clear.</p><p>When you know exactly what you need to do next, so much anxiety and stress seems to fade. It's as if the universe says, \"Ok, so let's get that done and then re-evaluate\".</p><h2 id=\"small-wins\">Small wins</h2><p>Sometimes, the difficulty is not that you don't have a clear goal, but that the goal is too far out. Your goal today might be to write a chapter in your novel, but if you're struggling to write a single page, that goal might be counter productive.</p><p>This might be obvious for those who have studied the flow state diagram:</p><figure class=\"kg-card kg-image-card\"><img src=\"https://positivepsychology.com/wp-content/uploads/Flow-State-Model.png\" class=\"kg-image\" alt=\"Flow state diagram\" loading=\"lazy\"></figure><p>When you make goals too ambitious and unrealistic, you put yourself in an anxiety inducing scenario.</p><p>A great hack is to find the smallest celebration worthy milestone you can set for yourself and chase the small win.</p><p>For software: Instead of making the entire feature work, we should make sure our components talk to each other end to end first. </p><p>For writing: Instead of writing a chapter, make an outline. Or try turning off your monitor and just brainstorming whatever ideas come to mind.</p><p><strong>Whatever you're trying to do, there is almost always a less ambitious version. </strong>Figure out what that is and consider starting there. A quick win under your belt will push you into flow.</p><h2 id=\"conclusion\">Conclusion</h2><p>I'm currently learning more about flow states. This time, guided by the idea that you haven't learned something until it's driven behavior change, I plan to implement some combination of tactics to improve the likelihood of reaching flow.</p><p>I might never quite reach that state consistently, but I do believe the following items helped me out today:</p><ul><li>Meditation</li><li>Pre-distraction work (starting tasks before looking at email, social media, news, etc)</li><li>Achieving clarity (doing the metawork, in this case, in the days before)</li><li>Setting small goals</li></ul><p>I've picked up the book Stealing Fire, and I hope to learn a few things from that.</p><p>I hope this post helped you think about focus and good luck with getting into flow!</p>",
      "comment_id": "5fa20e3619c6bb1748407172",
      "feature_image": "https://images.unsplash.com/photo-1489447068241-b3490214e879?ixlib=rb-1.2.1&q=80&fm=jpg&crop=entropy&cs=tinysrgb&w=2000&fit=max&ixid=eyJhcHBfaWQiOjExNzczfQ",
      "featured": false,
      "visibility": "public",
      "email_recipient_filter": "none",
      "created_at": "2020-11-04T02:13:10.000+00:00",
      "updated_at": "2020-11-04T04:02:37.000+00:00",
      "published_at": "2020-11-04T03:59:09.000+00:00",
      "custom_excerpt": "Yesterday and today could not have been more different - and the difference was flow. Here's what helped me get into flow today. ",
      "codeinjection_head": null,
      "codeinjection_foot": null,
      "custom_template": null,
      "canonical_url": null,
      "tags": [
        {
          "id": "6018dab2e5c67551a8f279b3",
          "name": "productivity",
          "slug": "productivity",
          "description": null,
          "feature_image": null,
          "visibility": "public",
          "og_image": null,
          "og_title": null,
          "og_description": null,
          "twitter_image": null,
          "twitter_title": null,
          "twitter_description": null,
          "meta_title": null,
          "meta_description": null,
          "codeinjection_head": null,
          "codeinjection_foot": null,
          "canonical_url": null,
          "accent_color": null,
          "url": "http://localhost:2368/tag/productivity/"
        }
      ],
      "primary_tag": {
        "id": "6018dab2e5c67551a8f279b3",
        "name": "productivity",
        "slug": "productivity",
        "description": null,
        "feature_image": null,
        "visibility": "public",
        "og_image": null,
        "og_title": null,
        "og_description": null,
        "twitter_image": null,
        "twitter_title": null,
        "twitter_description": null,
        "meta_title": null,
        "meta_description": null,
        "codeinjection_head": null,
        "codeinjection_foot": null,
        "canonical_url": null,
        "accent_color": null,
        "url": "http://localhost:2368/tag/productivity/"
      },
      "url": "http://localhost:2368/getting-into-flow/",
      "excerpt": "Yesterday and today could not have been more different - and the difference was flow. Here's what helped me get into flow today. ",
      "reading_time": 3,
      "access": true,
      "og_image": null,
      "og_title": null,
      "og_description": null,
      "twitter_image": null,
      "twitter_title": null,
      "twitter_description": null,
      "meta_title": null,
      "meta_description": null,
      "email_subject": null,
      "frontmatter": null
    },
    "legibility-and-software": {
      "id": "6018dab2e5c67551a8f279d8",
      "uuid": "ba52dc76-933a-4f17-9b91-d449a1bce563",
      "title": "Legibility and Software",
      "slug": "legibility-and-software",
      "html": "<p>I'm beginning to familiarize myself with the topic of legibility - a concept from the book \"Seeing Like a State\". While I haven't dug in deep, it appears the following are \"cannon\" for the topic:</p><ul><li><a href=\"https://www.ribbonfarm.com/2010/07/26/a-big-little-idea-called-legibility/\">A Big Little Idea Called Legibility</a> by Venkatesh Rao</li><li><a href=\"https://slatestarcodex.com/2017/03/16/book-review-seeing-like-a-state/\">Book Review: Seeing Like a State</a> by Scott Alexander</li></ul><p>And these are great accompaniments:</p><ul><li><a href=\"http://theoildrum.com/node/5528\">\"Peak Civilization\": The Fall of the Roman Empire</a> by Ugo Bardi</li><li><a href=\"https://www.eugenewei.com/blog/2020/9/18/seeing-like-an-algorithm\">Seeing Like an Algorithm</a> by Eugene Wei</li></ul><p>So let me take a quick stab at defining legibility, then take a glance at complexity, and finally bring this back to software.</p><p><strong>Legibility</strong> - the idea that complex systems are inefficient and can be rearranged with authoritarian mandates to optimize for ease of governance (in other words, when central authorities desire complex systems to be simplified for easier management, they desire legibility)</p><p>Alright, that was quick - onto complexity.</p><h2 id=\"complexity\">Complexity</h2><p>I expect to write about this in the future, but here's a quote I've begun to cite with religious zeal and frequency:</p><blockquote>For the simplicity that lies this side of complexity, I would not give a fig, but for the simplicity that lies on the other side of complexity, I would give my life</blockquote><p>This quote explains that there are <strong>two forms of simplicity</strong>. </p><p>The first is the type possessed by those who suffer from Dunning-Kruger's: you know too little, and thus you think you know it all.</p><p>The second is the type wielded by experts who truly <a href=\"https://nabeelqu.co/understanding\">understand</a>. This form of simplicity has \"scaled\" the complexity curve. If information is wild, then this form of simplicity is information tamed into a mental model.</p><figure class=\"kg-card kg-image-card\"><img src=\"https://www.planplusonline.com/wp-content/uploads/2014/06/The-Simplicity-on-the-Far-Side-of-Complexity_blogheader1.png\" class=\"kg-image\" alt loading=\"lazy\"></figure><p>For humans, complexity is not legible, whereas simplicity is. We desire legibility, but as you can see, one form is good. The other.. is quite bad.</p><h2 id=\"complexity-legibility-and-software\">Complexity, Legibility, and Software</h2><p>Software tends towards entropy. With time, as each feature gets added, as each bug gets \"fixed\", as developers come and go, the software system inevitably becomes a mess - no matter how pristine it started.</p><p>At some point, this complexity and entropy slows the team down. The company yearns for legibility!</p><p>In Alexander's review of \"Seeing Like A State\", he describes a similar situation in 18th century Prussia:</p><blockquote>Enlightenment rationalists noticed that peasants were just cutting down whatever trees happened to grow in the forests, <em>like a chump</em>. They came up with a better idea: clear all the forests and replace them by planting identical copies of Norway spruce (the highest-lumber-yield-per-unit-time tree) in an evenly-spaced rectangular grid</blockquote><p>And then?</p><blockquote>This went poorly. The impoverished ecosystem couldn’t support the game animals and medicinal herbs that sustained the surrounding peasant villages, and they suffered an economic collapse. The endless rows of identical trees were a perfect breeding ground for plant diseases and forest fires. And the complex ecological processes that sustained the soil stopped working, so after a generation the Norway spruces grew stunted and malnourished. Yet for some reason, everyone involved got promoted, and “scientific forestry” spread across Europe and the world.</blockquote><p>Sadly, this tale does not only apply to these Enlightenment rationalists. Anyone who has worked on a software team long enough to witness a regime change might resonate with this hypothetical:</p><p>Imagine a software engineering team who is growing fast, but lacks a CTO. The previous VP of Engineering was well liked, but resigned because he wanted to live in Boulder, CO and be among the rock climbing trails. And so, someone new comes in. </p><p>In order to govern their empire, this new CTO yearns for legibility. After 7 weeks on the job, they demand that all systems be rewritten in Java 7. Because Java 8+ and functional programming is \"too hard to hire for\" (which is code for the leadership by insecurity).</p><p>On the bright side, they've decided to start small and break up the monolith into microservices - and have chosen a couple of pilot projects to start.</p><p>On the downside, these projects will be led by the Council of The CTO, which is comprised of a few senior engineers the new CTO has spent the last 7 weeks hiring. </p><p>You can't help but notice that this collection of senior \"talent\" bears striking resemblance to Wormtongue whispering sweet sycophantic yes-man, yes-boss, reality-ignoring stupidity into the ears of the CTO. </p><figure class=\"kg-card kg-image-card\"><img src=\"https://memegenerator.net/img/instances/85070803/we-must-rewrite-in-java-7-my-lord.jpg\" class=\"kg-image\" alt loading=\"lazy\"></figure><p><em>Note, however, there is a difference between King Theoden and our hypothetical CTO: the causal relationship of incompetence doesn't run in the direction of powerful brownnosers leading to degraded leadership skills. Rather, it's ego-centric leadership leading to a festering entourage of way-too-highly-compensated henchmen, who reign for a brief moment of time.</em></p><p>And thus, we begin yet another \"High Modernist\" attempt at enforcing top down, rectangular grid, central planning on a software codebase. We all know how this disaster ends. The complexity wins, and the floundering CTO and their Council has found themselves thrashing about in <a href=\"https://sites.google.com/site/themythicalmanmonth/tmmm/tar-pit\">the tar pit</a>. </p><p>Sigh, one should not dive head first into the tar pit - it's best to \"lay some boardwalks across the tar\".</p><h2 id=\"boardwalks-for-complexity\">Boardwalks for Complexity</h2><p>So if hiring Mr. CTO isn't the way to go, how can we balance our need for legibility without causing an ecological meltdown?</p><p>I can't answer this conclusively, but I'm offering \"boardwalks\" - some tools that might help this dangerous traversal.</p><h3 id=\"1-archaeologists-not-architects\">1) Archaeologists not Architects</h3><p>When it comes to reining in the complexity of software, I believe that there is one truth we are trying to optimize for. It comes from the line in \"<a href=\"https://www.csc.gov.sg/articles/how-to-build-good-software\">How to Build Good Software</a>\":</p><blockquote>The main value in software is not the code produced, but the knowledge accumulated by the people who produced it.</blockquote><p>In many cases, the root cause of disastrous rewrites simply occurs because the people who wrote the first version of the software did not leave a legible trail for the people behind them. In fact, it's often the case that the trail blazers/code cowboys and cowgirls who wrote the code never even understood the domain themselves, simply brute-forcing, fire fighting, bug squashing, and praying their way to something that was Good Enough™.</p><p>But the onus of legibility is never on the original crew, the onus is on the team doing the rewrite. This squad must understand the situation on the ground before attacking. Whether or not the original crew left breadcrumbs is irrelevant. They left code and that, sadly, is Your King. </p><p>At this point, you want archaeologists and anthropologists, not architects. Anyone who starts architecting before digging is preparing to swim in the tar pit.</p><h3 id=\"2-clean-code-and-legibility\">2) Clean Code and Legibility</h3><p>At its core, I believe clean code is simply code that is \"legible to humans\". If code is quickly understood by the engineers on your team, and can be modified safely, then I believe it is \"clean\".</p><p>I like this concept because it shows us that legibility CAN be imposed on something, without sacrificing correctness and robustness. In fact, clean code is often more correct and more robust - because the abstractions are in place to add optimizations over time.</p><p>The concept here is that legibility can be achieved at the micro level if we strive for clean code. If new hires can make progress on your code base without much polite complaining, then your code is reasonably clean (i.e. they don't say things like \"The code's pretty good, although A, B, C, D, E, F, G, H, I, J, K... has slowed me a bit down this week\"). If they're complimenting the codebase, then you know it's clean (the joke here is that this doesn't happen).</p><p>So micro-legibility is great and all, but we're really looking for something bigger. Where else can we increase legibility in software without sacrificing correctness?</p><h3 id=\"3-the-micro-in-microservices\">3) The micro in Microservices</h3><p>As software systems get more complex, they often face \"The Decision\". That's the point in a startup's lifecycle where there are just too many engineers - and not everyone can coexist happily under one roof.</p><p>How a company negotiates the transition to microservices is important. Having seen a failed attempt at this, I have increased conviction that the right way to think about microservices (as with most new things, really) is to start super small.</p><p>Here's how you might start:</p><ul><li>Start a new feature as its own tiny microservice (typically when you need new resources and endpoints, not when you're adding fields to an existing resource)</li><li>Refactor tiny, stateless portions of your application into Serverless functions (anything that uses ImageMagick is a fantastic example - thumbnail generation, image resizing, etc. <a href=\"https://www.serverless.com/learn/use-cases/\">Here's some more</a>)</li></ul><p>In these cases, it's possible to chip away at pieces of the monolith while still preserving most of the hard earned \"learnings\" of the legacy code. That's because the ambitions are small. This avoids the hubris of diving straight into the tar pit.</p><h3 id=\"4-the-strangler\">4) The Strangler </h3><p>If your ambitions are not small, and you want to finish this rewrite before the next promotion cycle - then good luck, I can't help you. But if you're open to the idea that these things will take time, let's consider, The Strangler.</p><p>I've written about this in detail <a href=\"https://softwarementor.substack.com/p/9-the-strangler-pattern\">before</a>, and I don't wish to rehash everything from then. That said, let me pluck a few choice quotes so you don't have to redirect off this page:</p><blockquote>Thankfully, Azure has put out a great description of the <a href=\"https://docs.microsoft.com/en-us/azure/architecture/patterns/strangler\">Strangler Pattern</a>... Here’s their illustration of how to use it:</blockquote><figure class=\"kg-card kg-image-card\"><img src=\"https://cdn.substack.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fbucketeer-e05bbc84-baa3-437e-9518-adb32be77984.s3.amazonaws.com%2Fpublic%2Fimages%2F430262d4-a3b7-4b07-a3c9-729a0e695276_1833x552.png\" class=\"kg-image\" alt loading=\"lazy\"></figure><blockquote>The key point to note is that in this case, the Strangler is a Facade, a  wrapper around both the legacy and “modern” systems. This differs  slightly from Martin Fowler’s formulation. For Fowler, there isn’t  necessarily a Strangler Facade, just a legacy and modern system that  take different amounts of traffic.</blockquote><h2 id=\"conclusion\">Conclusion</h2><p>Legibility is a fascinating idea, especially in the context of complexity. And there's one thing I haven't really spoken about yet, which is human systems that are too complex tend to become brittle. Was the Fall of Rome simply the Empire reaching a tipping point of complexity?</p><p>And thus, we reach for legibility, not necessarily because we like it and want to look like geniuses, but sometimes, because we have to.</p><p>I don't have any answers, but I have offered \"boardwalks\" that you can place atop the tar pit:</p><ol><li>Favor <strong>Archaeologists</strong>, not Architects</li><li>Strive for <strong>Clean Code</strong> and Legibility</li><li>Put the micro in <strong>Micro</strong>services</li><li>Use the <strong>Strangler</strong></li></ol><p>Whether or not we can achieve legibility in software is not something I can answer. But hopefully, this article helps us to understand how we can \"See Like a Software Engineer\".</p>",
      "comment_id": "5f9c23bb19c6bb174840676f",
      "feature_image": "https://images.unsplash.com/photo-1512099053734-e6767b535838?ixlib=rb-1.2.1&q=80&fm=jpg&crop=entropy&cs=tinysrgb&w=2000&fit=max&ixid=eyJhcHBfaWQiOjExNzczfQ",
      "featured": false,
      "visibility": "public",
      "email_recipient_filter": "none",
      "created_at": "2020-10-30T14:31:23.000+00:00",
      "updated_at": "2020-11-01T15:52:35.000+00:00",
      "published_at": "2020-10-30T19:17:35.000+00:00",
      "custom_excerpt": "Legibility is simplicity, but not all simplicity is good. Where do we have opportunities to introduce \"good\" legibility into our systems?",
      "codeinjection_head": null,
      "codeinjection_foot": null,
      "custom_template": null,
      "canonical_url": null,
      "tags": [
        {
          "id": "6018dab2e5c67551a8f279b6",
          "name": "engineering",
          "slug": "engineering",
          "description": null,
          "feature_image": null,
          "visibility": "public",
          "og_image": null,
          "og_title": null,
          "og_description": null,
          "twitter_image": null,
          "twitter_title": null,
          "twitter_description": null,
          "meta_title": null,
          "meta_description": null,
          "codeinjection_head": null,
          "codeinjection_foot": null,
          "canonical_url": null,
          "accent_color": null,
          "url": "http://localhost:2368/tag/engineering/"
        }
      ],
      "primary_tag": {
        "id": "6018dab2e5c67551a8f279b6",
        "name": "engineering",
        "slug": "engineering",
        "description": null,
        "feature_image": null,
        "visibility": "public",
        "og_image": null,
        "og_title": null,
        "og_description": null,
        "twitter_image": null,
        "twitter_title": null,
        "twitter_description": null,
        "meta_title": null,
        "meta_description": null,
        "codeinjection_head": null,
        "codeinjection_foot": null,
        "canonical_url": null,
        "accent_color": null,
        "url": "http://localhost:2368/tag/engineering/"
      },
      "url": "http://localhost:2368/legibility-and-software/",
      "excerpt": "Legibility is simplicity, but not all simplicity is good. Where do we have opportunities to introduce \"good\" legibility into our systems?",
      "reading_time": 7,
      "access": true,
      "og_image": null,
      "og_title": null,
      "og_description": null,
      "twitter_image": null,
      "twitter_title": null,
      "twitter_description": null,
      "meta_title": null,
      "meta_description": null,
      "email_subject": null,
      "frontmatter": null
    },
    "feynman-and-dumb-questions": {
      "id": "6018dab2e5c67551a8f279d7",
      "uuid": "b3609db5-a3a7-4f11-a391-0b18b93583c1",
      "title": "Feynman and Dumb Questions",
      "slug": "feynman-and-dumb-questions",
      "html": "<blockquote>Some people think in the beginning that I’m kind of slow and I don’t understand the problem, because I ask a lot of these ‘dumb’ questions: ‘Is a cathode plus or minus? Is an an-ion this way, or that way?’</blockquote><p>-Richard Feynman, <em>Surely You Must Be Joking, Mr. Feynman</em></p><p>I love this quote because it hits upon some of my favorite themes:</p><ul><li>Go slow, then go fast</li><li>Understand the fundamentals</li></ul><p>But my favorite aspect of this quote is Feynman's willingness to look dumb. Here, he is probing for seemingly obvious facts, and if this was your first encounter with him, you might start to think this Mr. Feynman wasn't all he's been cracked up to be.</p><p>Yet sure enough, Feynman's mastery of the basics paid dividends:</p><blockquote>[L]ater, when the guy's in the middle of a bunch of equations, he'll say something and I'll say, \"Wait a minute! There's an error! That can't be right!\" The guy looks at his equations, and sure enough, after a while, he finds the mistake and wonders, \"How the hell did this guy, who hardly understood at the beginning, find that mistake in the mess of all these equations?\"</blockquote><h2 id=\"the-willingness-to-look-dumb\">The Willingness to Look Dumb</h2><p>The advice here is not \"be willing to look dumb\". </p><p>Rather, you should think of \"the willingness to look dumb\" as a wager - and like all speculative endeavors with probabilistic returns, there's a chance that you will come out on top, and one where you might tank your confidence into <a href=\"https://medium.com/incerto/the-logic-of-risk-taking-107bf41029d3\">ruin</a>.</p><p>Feynman's willingness to look dumb, I believe, was a bet. One that he felt comfortable taking for the following reasons:</p><ul><li>A previously high level of intellectual confidence (such a small wager was relatively inconsequential)</li><li>He knew that his typical ROI from clarifying the basics was positive </li></ul><p>The fact that Feyman himself called these \"dumb questions\" shows how self aware he was. This is not the case of a socially unaware genius just bulldozing his way through life. This was someone who felt the sting of social cues.</p><p>Yet he did it anyways. And he did it repeatedly. </p><h2 id=\"when-to-look-dumb\">When to Look Dumb</h2><p>Imagine that confidence can be banked (think of it as a bank account). And then imagine that \"dumb\" questions have a price, which is paid in a small amount of confidence. </p><p>When we ask dumb questions, we take a withdrawl from that confidence bank account.</p><p>If we have a lot of confidence, then this price is trivial. Go ahead, and ask your dumb questions.</p><p>But if you do not have a lot of confidence, you can't be so nonchalant. You must determine if this question will genereate a positive yield.</p><p>So let's walk through how we can think about this.</p><p>First, let's consider the cost:</p><ul><li>Will these people remember that I asked this question <strong>in 1 month</strong>?</li><li>Will this question disrupt the flow of conversation for everyone for more than 30 seconds?</li></ul><p>If the answer is yes to either of these, then this question is relatively expensive. Think twice.</p><p>Now, let's consider the benefits:</p><ul><li>Is this question a <strong>clarifying question</strong>?</li><li>Is this question relatively <strong>fundamental</strong>?</li><li>Does the answer to this question <strong>help you participate</strong> in the conversation? That is to say, does the conversation build on top of this?</li></ul><p>If you answered yes to any of these, then there's a good chance that the ROI from asking the question will at the very least lead you to break even. In each of these, you will use the knowledge gained a few times in the future.</p><p>Here are some more considerations:</p><ul><li>Are you <strong>actively curious</strong> about the answer?</li><li>Will you <strong>use the answer to build</strong> <strong>up a mental model</strong> of how something works?</li></ul><p>If you answered yes here, asking a dumb question is almost always a good idea. You're capturing your own intellectual momentum. The answer will help you understand something better than a Google search because you're emotionally involved. </p><p>Strike when the iron is hot.</p><h2 id=\"conclusion\">Conclusion</h2><p>Dumb questions can be mortifying to ask. You are trading vulnerability in the present for an unproven potential return in the future.</p><p>But building up a practice of asking questions will slowly build up your confidence. Not only that, but asking these uncomfortable questions can actually deepen your understanding.</p><p>Hell, even questions that don't make any sense can generate positive results. Consider this quote from Randall Munroe (of <a href=\"https://xkcd.com\">xkcd</a>):</p><blockquote>They say there are no stupid questions. That’s obviously wrong; I think my question about hard and soft things, for example, is pretty stupid. But it turns out that trying to thoroughly answer a stupid question can take you to some pretty interesting places.</blockquote><p><em>(That's in his foreword to his book \"<a href=\"https://www.amazon.com/What-Scientific-Hypothetical-Questions-International/dp/0544456866\">What if?</a>\")</em></p><p>A lot of us don't ask enough questions because we're too risk averse. I hope this post helps you think through the issue a little more clearly - and to start asking more questions.</p>",
      "comment_id": "5f9b0cc219c6bb174840655f",
      "feature_image": "https://images.unsplash.com/photo-1595452767427-0905ad9b036d?ixlib=rb-1.2.1&q=80&fm=jpg&crop=entropy&cs=tinysrgb&w=2000&fit=max&ixid=eyJhcHBfaWQiOjExNzczfQ",
      "featured": false,
      "visibility": "public",
      "email_recipient_filter": "none",
      "created_at": "2020-10-29T18:41:06.000+00:00",
      "updated_at": "2020-10-29T20:50:38.000+00:00",
      "published_at": "2020-10-29T20:46:36.000+00:00",
      "custom_excerpt": "Richard Feynman used to ask some pretty dumb questions. Here's what we can learn from him",
      "codeinjection_head": null,
      "codeinjection_foot": null,
      "custom_template": null,
      "canonical_url": null,
      "tags": [
        {
          "id": "6018dab2e5c67551a8f279b4",
          "name": "learning",
          "slug": "learning",
          "description": null,
          "feature_image": null,
          "visibility": "public",
          "og_image": null,
          "og_title": null,
          "og_description": null,
          "twitter_image": null,
          "twitter_title": null,
          "twitter_description": null,
          "meta_title": null,
          "meta_description": null,
          "codeinjection_head": null,
          "codeinjection_foot": null,
          "canonical_url": null,
          "accent_color": null,
          "url": "http://localhost:2368/tag/learning/"
        }
      ],
      "primary_tag": {
        "id": "6018dab2e5c67551a8f279b4",
        "name": "learning",
        "slug": "learning",
        "description": null,
        "feature_image": null,
        "visibility": "public",
        "og_image": null,
        "og_title": null,
        "og_description": null,
        "twitter_image": null,
        "twitter_title": null,
        "twitter_description": null,
        "meta_title": null,
        "meta_description": null,
        "codeinjection_head": null,
        "codeinjection_foot": null,
        "canonical_url": null,
        "accent_color": null,
        "url": "http://localhost:2368/tag/learning/"
      },
      "url": "http://localhost:2368/feynman-and-dumb-questions/",
      "excerpt": "Richard Feynman used to ask some pretty dumb questions. Here's what we can learn from him",
      "reading_time": 3,
      "access": true,
      "og_image": null,
      "og_title": null,
      "og_description": null,
      "twitter_image": null,
      "twitter_title": null,
      "twitter_description": null,
      "meta_title": null,
      "meta_description": null,
      "email_subject": null,
      "frontmatter": null
    },
    "ddia-glossary": {
      "id": "6018dab2e5c67551a8f279d6",
      "uuid": "7e4e53eb-4f1e-4bf3-8c03-6d3e858b3f21",
      "title": "Designing Data Intensive Applications - Glossary",
      "slug": "ddia-glossary",
      "html": "<p>One of the last ongoing activities of Summer of Shipping is a book club, where we meet weekly to work through the excellent book - Designing Data Intensive Applications.</p><p>In my opinion, this book is the gold standard for technical writing. Martin Kleppmann commands an expert level understanding of data architectures, yet delivers that expertise in a way that any engineer can follow. This is a great accomplishment with a tremendous <a href=\"https://martin.kleppmann.com/2020/09/29/is-book-writing-worth-it.html\">impact</a> -  it makes the field of databases and distributed systems \"<a href=\"https://www.eugenewei.com/blog/2020/9/18/seeing-like-an-algorithm\">legible</a>\" for many.</p><p>While I love the book - it's still a book. The medium is the message and it's not meant to be glanced at for quick recall. Thus, with the help of the SoS cohort, we've provided an accompaniment. This effort is ongoing, but the goal here is to provide a glossary of \"hard to remember\" terms paired with \"easy to grasp\" explanations.</p><h2 id=\"chapter-5-replication\">Chapter 5 - Replication</h2><p>Single Leader Replication</p><ul><li><strong>Semi-synchronous replication</strong> - A configuration of replicated databases where there is one synchronous follower, and all others are asynchronous. This means there is at least one guaranteed in sync follower, without a terrible performance penalty. It's a popular configuration</li><li><strong>Failover</strong> - the process of picking a new leader once a leader has failed. Complications may arise, such as the old leader rejoining after the new leader is chosen (in which case, the old leader's stale data is discarded, and starts following) and <strong>split brain</strong> (where multiple nodes think they're the leader. One of them eventually wins out)</li></ul><p>Types of Replication Logs</p><ul><li><strong>Statement Based replication</strong> - In this form of replication, statements are streamed to followers as is. It is conceptually easy and compact, but problems may arise when statements use things like rand() and now() and autoincrement. </li><li><strong>Write ahead log replication</strong> - this form of replication is done by sending the on-disk representation deltas to followers (recall that the write ahead log is used in crash recovery purposes). This may be a problem if upgrading database versions, but the greater principle is that by coupling the replication log with its representation, you can encounter difficulties (as you loose a degree of flexibility)</li><li><strong>Logical log (or row based) replication</strong> - describes the exact changes that are happening on each row. Avoids the problems of statement based (i.e. now and rand) and write ahead (coupling). Similar to write ahead log, this can result in a lot of data streamed to followers</li><li><strong>Trigger based replication</strong> - basically running some code to run some custom replication logic</li></ul><p>Replication Lag</p><ul><li><strong>Replication lag</strong> - the phenomenon where a follower is significantly behind the leader, such that someone who reads from the follower might observe a database that is in an old state.</li><li><strong>Read-after-write Consistency</strong> -  when you write to a database you would expect the change to be there upon subsequent reads. This consistency makes that guarantee</li><li><strong>Monotonic Reads</strong> - If several replicas are utilized, we can encounter a situation where some replicas are more behind than others. In such cases, read requests from replica to replica will look like we’re jumping around in time (possibly back in time). Monotonic reads are a guarantee which prevent such jumping around in time</li><li><strong>Consistent Prefix Reads</strong> - If there are two requests A and B, and B depends upon A, then we want to make sure no one sees B, unless they can also see A. This is a causal relationship, and the term “consistent prefix reads” simply means this causal ordering is maintained.</li></ul><p>Leaderless Replication</p><ul><li><strong>Read repair</strong> - When a client reads a value from multiple nodes and detects a stale value from one of the nodes, they will then write back the correct value to the node that contained the wrong value.</li><li><strong>Anti-entropy process</strong> - a background daemon that runs on some datastores that will persistently look for differences in data between replicas and restore them to a consistent state.</li><li><strong>Quorum</strong> -  a subset of a cluster that must be in agreement for a decision to be recognized. For Leaderless systems (the Dynamo family of databases), this is w + r &gt; n</li><li><strong>w + r &gt; n</strong> - this inequality is a rather sneaky way to guarantee fresh reads. It states that if there are n nodes in a cluster, then the number of nodes that must be written to is w, and the nodes that must be read from is r. If this inequality holds, then ever read will contain at least one of the fresh writes due to <strong>an inevitable overlap</strong>. Clever</li><li><strong>Last write wins</strong> - a very destructive way to handle concurrent writes, but is conceptually easy to remember as the name describes it perfectly: the last write to the DB should win. Used by Cassandra and optionally by Riak. (<em>Note on Cassandra</em>: <em>Because Cassandra uses this strategy, it is recommended to make each write operation to Cassandra with a UUID and treat the entry as immutable. This is similar to a log, or event sourcing</em>)</li><li><strong>\"Happens Before\" relationships </strong>- if we handle concurrent writes with care, we need to keep track of happens before relationships. This is typically done with version vectors</li></ul><h2 id=\"chapter-6-partitioning\">Chapter 6 - Partitioning</h2><ul><li><strong>Hot Spot</strong> - a partition receiving a unfairly high amount of load, e.g. it receives much more queries than other partitions. The presence of hot spots are antithetical to the goal of partitioning, which is to <em>evenly </em>distribute data and query load across a set of nodes.</li><li><strong>Secondary Index</strong> - an index that utilizes some other information other than the primary key. The keys in a secondary index are not necessarily unique, unlike a primary index.</li><li><strong>Document-partitioned Secondary Index</strong> - each partition maintains its own secondary index for its own data. Writing to the database in this case only requires that you interact with the partition containing the document you are writing to; however this complicates read queries as you must perform scatter/gather</li><li><strong>Scatter/gather</strong> - involves sending a particular query to all partitions (the scatter) and combining the returned results (the gather). This method can make read queries on secondary indices expensive.</li><li><strong>Term-partitioned Secondary Index</strong> - Instead of each partition maintaining its own secondary index, a global index is created covering the data in all partitions and is itself partitioned by term (or hash of the term). This makes reads more efficient, but writing to a document may affect different partitions of the global index.</li></ul><h3 id=\"a-note-on-rebalancing-partitions\">A note on \"rebalancing partitions\"</h3><p>Instead of thinking of this as rebalancing partitions, a better way is to think of mapping keys to partitions, and then partitions to nodes.</p><p>The idea here is to create the partition abstraction that is NOT 1-1 to nodes. This provides flexibility.</p><p>We can define partitions as ranges over the keys (if they’re naturally ranges) or over the hashes of keys (if we’re using hashed keys). Mod N is bad because changes to N cause a lot of partition changes. Once we’ve sliced out P partitions, we can assign them to the N nodes. Generally, P &gt;&gt; N and the assignment of the P partitions to the N nodes is kept in some consensus system. More capable machines can own more partitions than less capable ones and addition of new machines can “steal” partitions from other machines.<br><br>Partitions can be dynamically determined too. If there are more nodes, we can choose strategies (e.g. smaller ranges) so that there are more partitions and keep partitions small.</p><h3 id=\"a-note-on-routing-to-the-correct-partition\">A note on routing to the correct partition</h3><p>Supposing we have selected a partitioning scheme (e.g. hash or range keys), how things are routed depends on where the routing information can be: </p><ul><li>with the client</li><li>with some intermediary</li><li>or with the final destination</li></ul><p>If the client has full awareness of the destinations, it can send requests directly to the correct destination. Sometimes, there are many clients or the clients don’t have full visibility into the destinations. An intermediary like a routing proxy could route to the right place. Otherwise, destinations can function as intermediaries when they receive requests destined for a partition that they’re not responsible for. Some systems are a hybrid of these routing strategies. In all cases, the router must be aware of the possible destinations or at least the next hop and that may require use of a membership system that is typically a consensus system.</p>",
      "comment_id": "5f9a3aa219c6bb1748406420",
      "feature_image": "https://images.unsplash.com/photo-1524639064490-254e0a1db723?ixlib=rb-1.2.1&q=80&fm=jpg&crop=entropy&cs=tinysrgb&w=2000&fit=max&ixid=eyJhcHBfaWQiOjExNzczfQ",
      "featured": false,
      "visibility": "public",
      "email_recipient_filter": "none",
      "created_at": "2020-10-29T03:44:34.000+00:00",
      "updated_at": "2020-10-29T04:41:12.000+00:00",
      "published_at": "2020-10-29T04:38:53.000+00:00",
      "custom_excerpt": "A glossary of \"hard to remember\" terms from Designing Data Intensive Applications",
      "codeinjection_head": null,
      "codeinjection_foot": null,
      "custom_template": null,
      "canonical_url": null,
      "tags": [
        {
          "id": "6018dab2e5c67551a8f279b6",
          "name": "engineering",
          "slug": "engineering",
          "description": null,
          "feature_image": null,
          "visibility": "public",
          "og_image": null,
          "og_title": null,
          "og_description": null,
          "twitter_image": null,
          "twitter_title": null,
          "twitter_description": null,
          "meta_title": null,
          "meta_description": null,
          "codeinjection_head": null,
          "codeinjection_foot": null,
          "canonical_url": null,
          "accent_color": null,
          "url": "http://localhost:2368/tag/engineering/"
        }
      ],
      "primary_tag": {
        "id": "6018dab2e5c67551a8f279b6",
        "name": "engineering",
        "slug": "engineering",
        "description": null,
        "feature_image": null,
        "visibility": "public",
        "og_image": null,
        "og_title": null,
        "og_description": null,
        "twitter_image": null,
        "twitter_title": null,
        "twitter_description": null,
        "meta_title": null,
        "meta_description": null,
        "codeinjection_head": null,
        "codeinjection_foot": null,
        "canonical_url": null,
        "accent_color": null,
        "url": "http://localhost:2368/tag/engineering/"
      },
      "url": "http://localhost:2368/ddia-glossary/",
      "excerpt": "A glossary of \"hard to remember\" terms from Designing Data Intensive Applications",
      "reading_time": 5,
      "access": true,
      "og_image": null,
      "og_title": null,
      "og_description": null,
      "twitter_image": null,
      "twitter_title": null,
      "twitter_description": null,
      "meta_title": null,
      "meta_description": null,
      "email_subject": null,
      "frontmatter": null
    },
    "postman-on-technology": {
      "id": "6018dab2e5c67551a8f279d4",
      "uuid": "fdc47e08-262e-4b00-8305-48c849b58519",
      "title": "Neil Postman on Technology in 1998",
      "slug": "postman-on-technology",
      "html": "<p>I came across <a href=\"https://www.cs.ucdavis.edu/~rogaway/classes/188/materials/postman.pdf\">this transcript</a> of a talk delivered by Neil Postman about the dangers of technological change. While the tone is pessimistic, I think everyone working in technology should read it.</p><p>I'll summarize and add my analysis to the talk in this post, but seriously, you should go read the transcript.</p><p>The talk is centered around 5 thoughts on technological change (some I've rephrased):</p><ol><li>\"All technological change is a trade-off\"</li><li>The benefits of technology are not evenly distributed</li><li>If the medium is the message, then technology changes the message</li><li>\"Technological change is not additive; it is ecological\"</li><li>Technology tends \"to become mythic\"</li></ol><h2 id=\"1-all-technological-change-is-a-trade-off\">1) \"All technological change is a trade-off\"</h2><p>The idea here is that technology is a double edge sword - it is a tool that cuts both ways.</p><p>Postman starts by asking us to consider the printing press.</p><blockquote>The printing press gave the Western world prose, but it made poetry into an exotic and elitist form of communication. It gave us inductive science, but it reduced religious sensibility to a form of fanciful superstition. Printing gave us the modern conception of nationhood, but in so doing turned patriotism into a sordid if not lethal emotion. We might even say that the printing of the Bible in vernacular languages introduced the impression that God was an Englishman or a German or a Frenchman</blockquote><p>What Postman is leading us to recognize is that technology does not care about culture. And in fact, it is often destructive of culture. Is this <a href=\"https://en.wikipedia.org/wiki/Creative_destruction\">creative destruction</a>, or simply a bankruptcy of wisdom?</p><h2 id=\"2-the-benefits-of-technology-are-not-evenly-distributed\">2) The benefits of technology are not evenly distributed</h2><p>In this idea, Postman mentions that technology brings great benefit to some, but inflicts harm to others.</p><p>By way of analogy, he asks us to consider the blacksmith at the dawn of the automobile. Many believed the automobile would bring them more business, but alas, that is not what happened. The automobile was the beginning of the obsolescence of blacksmiths.</p><p>When it comes to computers, Postman predicted that the winners of the computer revolution would be large scale organizations like the military, airlines, and banks. But most people would bear some degree of harm.</p><blockquote>These people have had their private matters made more accessible to powerful institutions. They are more easily tracked and controlled; they are subjected to more examinations, and are increasingly mystified by the decisions made about them. They are more than ever reduced to mere numerical objects. They are being buried by junk mail. They are easy targets for advertising agencies and political institutions </blockquote><p>Indeed, if we look at his warnings, they have played out:</p><ul><li>Tracking</li><li>Advertisements</li><li>Control</li></ul><p>This reminds me of the <a href=\"https://mattstoller.substack.com/p/the-cantillon-effect-why-wall-street\">Cantillon Effect</a>, which is the phenomenon where newly printed money will first increase inequality before leading to uniform inflation. Quite simply, the new money tends to be received by the rich. The rich will spend this unearned inheritance and cause prices to rise. Eventually, this money will find its way to the poor, but not before they have had to endure a period of higher prices without seeing higher wages.</p><h2 id=\"3-if-the-medium-is-the-message-then-technology-changes-the-message\">3) If the medium is the message, then technology changes the message</h2><p>Postman cites Marshall McLuhan: \"The medium is the message\".</p><p>He describes how writing first shifted the importance away from memory:</p><blockquote>But in a culture with writing, such feats of memory are considered a waste of time, and proverbs are merely irrelevant fancies. The writing person favors logical organization and systematic analysis, not proverbs</blockquote><p>And subsequent technology changes after writing:</p><blockquote>The telegraphic person values speed, not introspection. The television person values immediacy, not history</blockquote><p>And finally, this brings us to computers:</p><blockquote>And computer people, what shall we say of them? Perhaps we can say that the computer person values information, not knowledge, certainly not wisdom. Indeed, in the computer age, the concept of wisdom may vanish altogether</blockquote><p>While that's harsh, it's very true that the Internet has changed how we write (shorter pieces, otherwise the visitor bounces - with simple diction). Has it eroded our concept of wisdom?</p><p>It's a useful question to ponder.</p><h2 id=\"4-technological-change-is-not-additive-it-is-ecological\">4) \"Technological change is not additive; it is ecological\"</h2><p>Like Pandora's Box, once you've opened the door to a new technology, there's no going back - and it permeates through all of life.</p><p>This point is all about the idea that because technology touches everything, it's extremely hard to predict the higher order effects.</p><p>But because we can't predict the higher order effects, we need to be hyper vigilant. Otherwise, the capitalists who create the systems won't be worrying about their impact on the culture:</p><blockquote>The radicals who have changed the nature of politics in America are entrepreneurs in dark suits and grey ties who manage the large television industry in America. They did not mean to turn political discourse into a form of entertainment. They did not mean to make it impossible for an overweight person to run for high political office. They did not mean to reduce political campaigning to a 30-second TV commercial. All they were trying to do is to make television into a vast and unsleeping money machine. That they destroyed substantive political discourse in the process does not concern them.</blockquote><p>Postman is talking about television, but you could easily see him talking about Facebook and Surveillance Capitalism today.</p><h2 id=\"5-technology-tends-to-become-mythic\">5) Technology tends \"to become mythic\"</h2><p>This last point is simply to say that very quickly, technology becomes something of a given - that's just the way things are. But the truth is, technology and the use of technology is a cage devised for all of us by those who seek to profit.</p><p>Postman discusses how we take the alphabet for granted:</p><blockquote>I have on occasion asked my students if they know when the alphabet was invented. The question astonishes them. It is as if I asked them when clouds and trees were invented. The alphabet, they believe, was not something that was invented. It just is. </blockquote><p>And likens it to other forms of technology:</p><blockquote>It is this way with many products of human culture but with none more consistently than technology. Cars, planes, TV, movies, newspapers—they have achieved mythic status because they are perceived as gifts of nature, not as artifacts produced in a specific political and historical context</blockquote><p>This is dangerous - to accept things the way they are, as opposed to question whether we can have something better.</p><h2 id=\"conclusion\">Conclusion</h2><p>Even though the talk was from 1998, it might be more relevant now than ever. With \"Big Tech\" under scrutiny, the tide has truly shifted and we're all beginning to ask \"has all this technology truly made our lives better?\".</p><p>I personally believe that technology will march on, whether we like it or not. New mediums of expression will continue to arise. And we will soon be at the boundary of \"supassing\" humanity, as gene editing and AI mature with each passing month. That's a scary thought.</p>",
      "comment_id": "5f9773b719c6bb1748406125",
      "feature_image": "https://images.unsplash.com/photo-1451187580459-43490279c0fa?ixlib=rb-1.2.1&q=80&fm=jpg&crop=entropy&cs=tinysrgb&w=2000&fit=max&ixid=eyJhcHBfaWQiOjExNzczfQ",
      "featured": false,
      "visibility": "public",
      "email_recipient_filter": "none",
      "created_at": "2020-10-27T01:11:19.000+00:00",
      "updated_at": "2020-10-27T05:29:58.000+00:00",
      "published_at": "2020-10-27T04:27:00.000+00:00",
      "custom_excerpt": "Neil Postman warns us that technology is disruptive - not of industries, but of our culture and our wisdom. My notes from his talk in 1998",
      "codeinjection_head": null,
      "codeinjection_foot": null,
      "custom_template": null,
      "canonical_url": null,
      "tags": [
        {
          "id": "6018dab2e5c67551a8f279b5",
          "name": "tech",
          "slug": "tech",
          "description": null,
          "feature_image": null,
          "visibility": "public",
          "og_image": null,
          "og_title": null,
          "og_description": null,
          "twitter_image": null,
          "twitter_title": null,
          "twitter_description": null,
          "meta_title": null,
          "meta_description": null,
          "codeinjection_head": null,
          "codeinjection_foot": null,
          "canonical_url": null,
          "accent_color": null,
          "url": "http://localhost:2368/tag/tech/"
        }
      ],
      "primary_tag": {
        "id": "6018dab2e5c67551a8f279b5",
        "name": "tech",
        "slug": "tech",
        "description": null,
        "feature_image": null,
        "visibility": "public",
        "og_image": null,
        "og_title": null,
        "og_description": null,
        "twitter_image": null,
        "twitter_title": null,
        "twitter_description": null,
        "meta_title": null,
        "meta_description": null,
        "codeinjection_head": null,
        "codeinjection_foot": null,
        "canonical_url": null,
        "accent_color": null,
        "url": "http://localhost:2368/tag/tech/"
      },
      "url": "http://localhost:2368/postman-on-technology/",
      "excerpt": "Neil Postman warns us that technology is disruptive - not of industries, but of our culture and our wisdom. My notes from his talk in 1998",
      "reading_time": 4,
      "access": true,
      "og_image": null,
      "og_title": null,
      "og_description": null,
      "twitter_image": null,
      "twitter_title": null,
      "twitter_description": null,
      "meta_title": null,
      "meta_description": null,
      "email_subject": null,
      "frontmatter": null
    },
    "notes-on-waitzkin-at-sohn": {
      "id": "6018dab2e5c67551a8f279d2",
      "uuid": "a7e8bf4b-4a3e-4aa9-876f-35c11e738322",
      "title": "Notes on Waitzkin at Sohn",
      "slug": "notes-on-waitzkin-at-sohn",
      "html": "<p>I watched a video today that dispensed some great wisdom on learning. It was of Josh Waitzkin being interviewed by Tim Ferriss at the Sohn Conference in 2019:</p><figure class=\"kg-card kg-embed-card\"><iframe width=\"600\" height=\"350\" src=\"https://www.youtube.com/embed/4r6gr7uytQA?feature=oembed\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe></figure><p>Here are my takeaways</p><h2 id=\"finish-strong\">Finish Strong</h2><p>Waitzkin shares that he was once skiing with Olympic gold medalist Billy Kidd when Kidd turned to him and asked  \"Do you know what the three most important turns of the ski run are?\".</p><p>Most skiiers might say the middle turns. These are often done at the highest speed and greatest intensity.</p><p>But that's not it. Kidd said the most important turns are the last three before you get on the lift. </p><p>People tend to get sloppy towards the end, but those three turns are what your body is subconsciously internalizing as you ride the ski lift back up.</p><p>It's true in martial arts - when Josh was practicing Taichi push hands (he became a world champion), he would always finish strong and making sure to execute the technique as well as he could before signing off for the day</p><blockquote>The last thing you do is what is going to burn most deeply over night. Harnessing unconscious learning is a huge part of what I do</blockquote><p>This story is fascinating because it reminds me of a video I watched of why Steph Curry is successful. The narrator was a coach at Kobe's Nike Skills Academy and Steph was a camper. He mentioned that Steph was the most impressive kid there, because he was \"meticulous\" with everything he did. But here's a gem:</p><blockquote>Probably the most impressive thing that he did - as soon as the workout was over, he would not leave the court until he swished - SWISHED - five free throws in a row. Do you know how hard that is?</blockquote><figure class=\"kg-card kg-embed-card\"><iframe width=\"600\" height=\"350\" src=\"https://www.youtube.com/embed/rxsdiusm1NQ?feature=oembed\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe></figure><p>There's great wisdom in making your subconscious work for you. Steph - whether he knew it it or not- had found a way to channel it.</p><h2 id=\"your-miq-and-your-subconscious\">Your MIQ and Your Subconscious </h2><p>Waitzkin introduces the concept of a MIQ or Most Important Question. He says you want to end your day thinking about your MIQ, then you want to relax, and in the morning, brainstorm on the MIQ as the first thing you do. Absolutely no Twitter, no phone use - you want to be \"preinput\" as Waitzkin mentions. </p><p>The key is to leverage your subconscious - you want your subconscious to be working on the problem as you sleep.</p><p>He cites how Earnest Hemingway would leave his work with something \"left to write\" - whether that was midsentence, midparagraph, or something unfinished.</p><p>So what does this look like? It might be something like this:</p><ul><li>MIQ: Do I intuitively feel like the VP of Sales candidate is an ethical person?</li><li>Relax: Stop thinking about the MIQ and go grab a glass of wine with your partner. (The art of letting go is important he says)</li><li>Morning: Before your mind gets influenced by any other source, start writing/brainstorming about the MIQ</li></ul><p>The idea of priming your subconscious is what I think Paul Graham was talking about in his essay \"<a href=\"http://www.paulgraham.com/top.html\">The Top Idea in Your Mind</a>\"</p><blockquote>I think most people have one top idea in their mind at any given time.  That's the idea their thoughts will drift toward when they're allowed to drift freely.  And this idea will thus tend to get all the benefit of that type of thinking, while others are starved of it.</blockquote><p>So finishing your day with your MIQ primed is just another way of feeding your top idea to your subconscious for processing. Jumping on it as the first thing you do in the morning is a great way to see if your subconscious has generated any insights. Maybe not, but you need to give it a chance.</p><p>And to pick your MIQ - Waitzkin has this little gem of a quote:</p><blockquote>Most great thinkers are like a knife through butter, and then they get stuck</blockquote><p>That \"stuck\" is your MIQ.</p><h2 id=\"extreme-relaxation-and-then-extreme-focus\">Extreme Relaxation and then Extreme Focus</h2><p>I'll let these quotes mostly speak for themselves.</p><p>Imagine watching a boxer in slow motion:</p><blockquote>If you watch a great boxer, the relaxation before a strike is delivered is incredible</blockquote><p>How do you apply this idea of extreme relaxation combined with extreme focus?</p><blockquote>Most people in high stress decision making industries are always operating at this simmering six or four. As opposed to the unduluation between just deep relaxation and being at a ten. And being at a ten is millions times better than just being at a six</blockquote><p>The idea is if you feel \"always on\", you're capping your energy such that your maximum is a \"simmering six\". Waitzkin mentions the importance of being able to operate at a \"ten\" - and that can make all the difference.</p><p>In my own life, I really think this is true - especially in times of judgement. When you are designing a system or deciding what kind of project to create, you want to make the decision when you're at a \"ten\". If you're in execution mode, just pure labor, you can probably hang out at that \"simmering six\".</p><h2 id=\"self-expression\">Self Expression</h2><p>Just read these quotes and soak in the wisdom. May they inspire you</p><blockquote>\"It's very easy to follow the mental models of others, or follow the paths of others. And it's usually disastrous\"</blockquote><blockquote>\"From my perspective the goal is unobstructed self expression. So first we have to understand what self expression is and who we are as a learner. We have to embrace every element of our funk and build around it.\"</blockquote><blockquote>\"It's such a beautiful thing that happens\"</blockquote><blockquote>\"And I think a big part of being all in on something, and falling in love with something so deeply that you're just eating it, breathing it, you're sleeping it. You wake up in the morning wanting to do it. You want to train at it. Being just on fire, stoked out of your mind on the thing. It's this feeling that you're expressing yourself through what you're doing.\"</blockquote><blockquote>\"If you're a writer, or a chess player, or writing books and doing brilliant podcasts. If you feel like you're expressing the core of your being, then it's beautiful.\"</blockquote><blockquote>\"If I'm doing it in a way that someone tells me versus a way that expresses the core of my being - it's a different world.\"</blockquote><blockquote>\"It's not so easy to get to know ourselves. But I think the art of introspection. Psychologically. Somatically. Is one of the most important that we can take on\"</blockquote><h2 id=\"conclusion\">Conclusion</h2><p>I believe we are not getting enough out of subconscious minds.</p><p>I like to say that when I am solving a problem, my strategy is mostly to \"prime my brain\" with all of the facts and algorithms/strategies and just sit there until I have an insight. Of course, I might be doing work like writing down facts or rearranging facts, but what I'm really doing is I'm just playing with the details such that my subconscious can find the solution.</p><p>What I love about what Waitzkin talks about is this deep respect for the subconscious, as well as the deep sense of self expression. Some things cannot be \"logicked\". I do not believe you can truly rationalize your way to insights, no matter how logical they appear after the fact. And I know you cannot rationalize your way to discovering what you love in life. </p><p>Learn to work with your subconscious. Learn to love the </p>",
      "comment_id": "5f94cd7619c6bb1748405f4d",
      "feature_image": "https://images.unsplash.com/photo-1481627834876-b7833e8f5570?ixlib=rb-1.2.1&q=80&fm=jpg&crop=entropy&cs=tinysrgb&w=2000&fit=max&ixid=eyJhcHBfaWQiOjExNzczfQ",
      "featured": false,
      "visibility": "public",
      "email_recipient_filter": "none",
      "created_at": "2020-10-25T00:57:26.000+00:00",
      "updated_at": "2020-10-26T02:52:41.000+00:00",
      "published_at": "2020-10-25T05:40:16.000+00:00",
      "custom_excerpt": "In an interview, Josh Waitzkin shares some wisdom about learning and life. Here are some notes and takeaways",
      "codeinjection_head": null,
      "codeinjection_foot": null,
      "custom_template": null,
      "canonical_url": null,
      "tags": [
        {
          "id": "6018dab2e5c67551a8f279b4",
          "name": "learning",
          "slug": "learning",
          "description": null,
          "feature_image": null,
          "visibility": "public",
          "og_image": null,
          "og_title": null,
          "og_description": null,
          "twitter_image": null,
          "twitter_title": null,
          "twitter_description": null,
          "meta_title": null,
          "meta_description": null,
          "codeinjection_head": null,
          "codeinjection_foot": null,
          "canonical_url": null,
          "accent_color": null,
          "url": "http://localhost:2368/tag/learning/"
        },
        {
          "id": "6018dab2e5c67551a8f279af",
          "name": "life",
          "slug": "life",
          "description": null,
          "feature_image": null,
          "visibility": "public",
          "og_image": null,
          "og_title": null,
          "og_description": null,
          "twitter_image": null,
          "twitter_title": null,
          "twitter_description": null,
          "meta_title": null,
          "meta_description": null,
          "codeinjection_head": null,
          "codeinjection_foot": null,
          "canonical_url": null,
          "accent_color": null,
          "url": "http://localhost:2368/tag/life/"
        }
      ],
      "primary_tag": {
        "id": "6018dab2e5c67551a8f279b4",
        "name": "learning",
        "slug": "learning",
        "description": null,
        "feature_image": null,
        "visibility": "public",
        "og_image": null,
        "og_title": null,
        "og_description": null,
        "twitter_image": null,
        "twitter_title": null,
        "twitter_description": null,
        "meta_title": null,
        "meta_description": null,
        "codeinjection_head": null,
        "codeinjection_foot": null,
        "canonical_url": null,
        "accent_color": null,
        "url": "http://localhost:2368/tag/learning/"
      },
      "url": "http://localhost:2368/notes-on-waitzkin-at-sohn/",
      "excerpt": "In an interview, Josh Waitzkin shares some wisdom about learning and life. Here are some notes and takeaways",
      "reading_time": 5,
      "access": true,
      "og_image": null,
      "og_title": null,
      "og_description": null,
      "twitter_image": null,
      "twitter_title": null,
      "twitter_description": null,
      "meta_title": null,
      "meta_description": null,
      "email_subject": null,
      "frontmatter": null
    }
  }